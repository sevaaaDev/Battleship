(()=>{"use strict";const t={container:"kxQvc8rJ79LoRKCb8nOw",board:"IHitRuohOL4qlMoFBkaz",ship:"xhijktdZIHkpEbIdnr7q",allowDrag:"unuiIUTqHLly_isWNV_e",dim:"DGzypBuW903zUseFSAf4",drag:"xl5X9JLCFwVNR_vLWgUa",hit:"sMVWb7CXKixybHKg2dRz",miss:"p9GjbDR6kAa4yEqEiKuh",bigTitle:"KiH48s1aEIEMYcvc1l7P",mainBoardWrapper:"rpCX3Ix39WdIUuL2NEPg",boardName:"sHptOvwqD8gAFBGqgM4x",boardsContainer:"QjeE9ix9AFDgKci062o6",listOfShips:"Kryf4fNGscPaTcbPaBdQ",buttonContainer:"wV9aQdKDwBBuyayZ0MQQ",listOfShipsLeft:"Wp4dmQx7zm2btPjILr1a Kryf4fNGscPaTcbPaBdQ",listOfShipsRight:"tHT_FBdqArTSJigc6KXV Kryf4fNGscPaTcbPaBdQ",shipSunk:"GFyG59Tn8_wedBl3tx8R",smallTile:"joDO4L7ynzzyiBfDO5bq",messageInfo:"HKzLKt73qZpk67_NMg3L"};const e={html:function(){document.querySelector("body").innerHTML=`\n<header>\n  <h1 class='${t.bigTitle}'>Battleship</h1>\n</header>\n<main class='${t.container}'>\n  <section class='${t.messageInfo}'>\n    <p>Drag ship to move <br> Click ship to rotate</p>\n  </section>\n  <section class='${t.boardsContainer}'>\n    <section class='${t.mainBoardWrapper}' data-board='player'>\n        <div class='${t.listOfShipsLeft}' data-board='player' style='display:none'></div>\n      <section class='${t.boardWrapper}'>\n        <div class='${t.board}' data-board='player' ondragstart="() => false"></div>\n        <h3 class='${t.boardName}'>PLAYER</h3>\n      </section>\n    </section>\n    <section class='${t.mainBoardWrapper}' data-board='computer' style='display:none'>\n      <section class='${t.boardWrapper}'>\n        <div class='${t.board}' data-board='computer' ondragstart="() => false"></div>\n        <h3 class='${t.boardName}'>COMPUTER</h3>\n      </section>\n        <div class='${t.listOfShipsRight}' data-board='computer' style='display:none'></div>\n    </section>\n  </section>\n  <section class='${t.buttonContainer}'>\n    <button type='button'data-type='start'>Start</button>\n  </section>\n</main>\n`},board:function(e,i,s){let a=document.querySelector(`div[data-board="${i}"].${t.board}`);a.innerHTML="";for(let n=9;n>=0;n--)for(let o=0;o<10;o++){let r=document.createElement("div");r.setAttribute("data-x",o),r.setAttribute("data-y",n),r.ondragstart=()=>!1,"player"===i&&r.setAttribute("data-drop",!0),"object"==typeof e.board[o][n]&&(s&&r.classList.add(`${t.ship}`),"player"===i&&(r.classList.add(`${t.allowDrag}`),"player"===i&&r.setAttribute("data-ship",!0))),"missed"===e.board[o][n]&&r.classList.add(`${t.miss}`),"hit"===e.board[o][n]&&r.classList.add(`${t.hit}`),a.append(r)}},listOfShips:function(e,i){const s=document.querySelector(`div[data-board='${i}'].${t.listOfShips}`);s.innerText="";for(let i of e){const e=document.createElement("div");e.setAttribute("data-ship",i.name);for(let s=0;s<i.length;s++){const i=document.createElement("div");i.classList.add(`${t.smallTile}`),e.append(i)}s.append(e)}},button:function(e){const i=document.querySelector(`.${t.buttonContainer}`),s=document.createElement("button");s.setAttribute("type","button"),s.setAttribute("data-type",e),s.innerText=e[0].toUpperCase().concat(e.slice(1)),i.append(s)}};function i(e){e.classList.remove(`${t.dim}`)}function s(e){document.querySelector(`.${t.messageInfo} p`).innerText=e}const a={tile:function(e,i,s,a){"missed"!==e?"hit"!==e||function(e,i,s){let a=document.querySelector(`div[data-board='${e}'] div[data-x='${i}'][data-y='${s}']`);a.classList.remove(`${t.ship}`),a.classList.add(`${t.hit}`)}(i,s,a):function(e,i,s){let a=document.querySelector(`div[data-board='${e}'] div[data-x='${i}'][data-y='${s}']`);a.classList.remove(`${t.disabled}`),a.classList.add(`${t.miss}`)}(i,s,a)},listOfShips:function(e,i){for(let s of e){const e=document.querySelector(`div[data-board='${i}'] div[data-ship='${s.name}']`);s.isSunk()&&e.classList.add(`${t.shipSunk}`)}},removeCursorDrag:function(){document.querySelectorAll(`div[data-board='player'] div.${t.ship}`).forEach((e=>{e.classList.remove(`${t.allowDrag}`)}))},removeDisplayNone:function(){document.querySelectorAll("[style='display:none']").forEach((t=>{t.removeAttribute("style")}))},messageInfo:s,info:function(t){"missed"!==t?"hit"!==t||s("You fired a shot and its a hit"):s("You fired a shot and misses")},toggleDimBoard:function(e){document.querySelector(`section[data-board='${e}'].${t.mainBoardWrapper}`).classList.add(`${t.dim}`),i("player"!==e?document.querySelector(`section[data-board='player'].${t.mainBoardWrapper}`):document.querySelector(`section[data-board='computer'].${t.mainBoardWrapper}`))}},n={isSunk:function(){return!this.health&&(this.sunk=!0,!0)},hit:function(){this.health&&this.health--}};function o(t,e,i,s){const a={listCoordinate:[]};return a.head=[t,e],a.tail=[t+s-1,e],"y"===i&&(a.tail=[t,e+s-1]),a}function r(t){const e=function(){let t=0;return function(){let e=[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Destroyer",length:3},{name:"Submarine",length:3},{name:"Patrol",length:2}];return t>e.length-1&&(t=0),e[t++]}}();let i=l();for(let s=0;s<5;s++){const s=e();let{coordinate:a,orient:n}=d(t,s,i,"x");c(i,s.length,a,n)}}function d(t,e,i,s){let[a,r]=function(t){return t[Math.floor(Math.random()*(t.length-1))]}(i,e.length),c=o(a,r,s,e.length),l=t.placeShip(function({length:t,name:e,orient:i,shipPosition:s}){const a=Object.create(n);return a.length=t,a.name=e,a.health=t,a.sunk=!1,a.orientation=i,a.position=s,a}({...e,shipPosition:c,orient:s}));return s="x"===s?"y":"x",l?{coordinate:[a,r],orient:s}:d(t,e,i,s)}function c(t,e,i,s){let a=i.slice();for(let i=0;i<e;i++)"x"===s?t.splice(t.indexOf([a[0]++,a[1]]),1):t.splice(t.indexOf([a[0],a[1]++]),1)}function l(){let t=[];for(let e=0;e<10;e++)for(let i=0;i<10;i++)t.push([e,i]);return t}const h={placeShip(t){let e=t.length,i=t.orientation,s=t.name,[a,n]=t.position.head,o=t.position.listCoordinate;if(!this.isOutside(a,n,e,i)&&!this.isThereAShip(a,n,e,i,s)&&!this.isTooCloseToOtherShip(a,n,e,i,s)){for(let s=0;s<e;s++)this.board[a][n]=t,o.push({x:a,y:n}),"x"!==i?n++:a++;return this.ships.push(t),!0}},moveShip(t,e,i){this.removeShip(...t);let s=o(...e,i.orientation,i.length);i.position=s,this.placeShip(i)},isTooCloseToOtherShip(t,e,i,s,a){for(let n=0;n<i;n++){for(let i of this.graph[`${t},${e}`]){let[t,e]=i.split(",");if("object"==typeof this.board[t][e]&&this.board[t][e].name!==a)return!0}"x"!==s?e++:t++}return!1},isThereAShip(t,e,i,s,a){for(let n=0;n<i;n++){if("object"==typeof this.board[t][e]&&this.board[t][e].name!==a)return!0;"x"!==s?e++:t++}return!1},removeShip(t,e){let i=this.board[t][e];for(let t of i.position.listCoordinate)this.board[t.x][t.y]=void 0;let s=this.ships.indexOf(i);this.ships.splice(s,1)},isOutside:(t,e,i,s)=>t<0||t>9||e<0||e>9||("x"===s?t+i-1>9:e+i-1>9),receiveAttack([t,e]){let i;return!this.isOutside(t,e)&&"hit"!==this.board[t][e]&&("object"==typeof this.board[t][e]&&(this.board[t][e].hit(),i="hit",this.attack.push({x:t,y:e}),this.board[t][e]="hit"),void 0===this.board[t][e]&&(i="missed",this.missedAttack.push({x:t,y:e}),this.board[t][e]="missed"),i)},areAllSunk(){let t=this.checkShip();return!(this.ships.length-t)},thisShipSunk(){let t=this.checkShip();return this.numOfSunkShip!==t&&(this.numOfSunkShip=t,!0)},checkShip(){let t=0;for(let e of this.ships)e.isSunk()&&t++;return t},reset(){this.missedAttack=[],this.attack=[],this.board=m(),this.ships=[],this.graph=u()}};function u(){let t={};for(let e=0;e<10;e++)for(let i=0;i<10;i++){let s=p(e,i);t[`${e},${i}`]=s}return t}function p(t,e){let i=[];return i.push(`${t+1},${e}`),i.push(`${t-1},${e}`),i.push(`${t},${e+1}`),i.push(`${t},${e-1}`),i.push(`${t+1},${e+1}`),i.push(`${t+1},${e-1}`),i.push(`${t-1},${e+1}`),i.push(`${t-1},${e-1}`),i.filter((t=>{let e=t.split(",");if(e[0]<10&&e[0]>-1&&e[1]<10&&e[1]>-1)return!0}))}function m(){let t=[];for(let e=0;e<10;e++){t.push([]);for(let i=0;i<10;i++)t[e].push(void 0)}return t}function f(){const t=Object.create(h);return t.missedAttack=[],t.attack=[],t.board=m(),t.ships=[],t.numOfSunkShip=0,t.graph=u(),t}let v={chooseCoord(){let[t,e]=this.attackRandom();return(this.isPreviousMoveHit||this.stack.x.length+this.stack.y.length!==0)&&([t,e]=this.smartAttack(this.isPreviousMoveHit,this.previousMove)),-1===e&&([t,e]=this.attackRandom()),this.moves.splice(e,1),this.previousMove=t,t},smartAttack(t,e){return this.isPreviousShipSunk?(this.attackDirection="x",this.stack.x=[],this.stack.y=[],[void 0,-1]):(t||0!==this.stack.x.length||(this.attackDirection="y"),this.stack.y.length||"y"===this.attackDirection||this.fillStackQueue("y",e),!0===t&&this.fillStackQueue(this.attackDirection,e),this.getSmartMove(this.attackDirection))},fillStackQueue(t,e){let i=0;"y"===t&&(i=1);let s=[...e];s[i]--,this.checkCoordinate(...s)&&this.stack[t].push(s);let a=[...e];a[i]++,this.checkCoordinate(...a)&&this.stack[t].push(a)},getSmartMove(t){let e=this.stack[t].pop();return void 0===e?[e,-1]:[e,this.getCoordinateIndex(...e)]},removeMove(t){let e=this.getCoordinateIndex(...t);this.moves.splice(e,1)},attackRandom(){const t=Math.floor(Math.random()*(this.moves.length-1)),e=this.moves[t];return e?[e,t]:"finish"},changePreviousMoveStatus(t){this.isPreviousMoveHit="missed"!==t},getCoordinateIndex(t,e){let i=-1;return this.moves.map(((s,a)=>{s[0]===t&&s[1]===e&&(i=a)})),i},checkCoordinate(t,e){let i=!1;return this.moves.map((s=>{s[0]===t&&s[1]===e&&(i=!0)})),i},changePreviousShipStatus(t){this.isPreviousShipSunk=t}};function b(){let t=l();const e={get moves(){return t},isPreviousMoveHit:null,previousMove:null,stack:{x:[],y:[]},attackDirection:"x",isPreviousShipSunk:!1,reset(){t=l()}};return Object.setPrototypeOf(e,v),e}const y=t=>new Promise((e=>setTimeout(e,t)));function g(t,i){e.html(),e.board(t,"player",!0),e.board(i,"computer",!1),e.listOfShips(t.ships,"player"),e.listOfShips(i.ships,"computer")}!function(){let i=f(),s=f(),n=b();function o(t){t.target.matches('[data-ship="true"]')&&function(t,e,i){let s=i.board[t][e],a=s.position.head,n=s.orientation;n="x"===n?"y":"x";let o=s.length;return!(i.isOutside(...a,o,n)||i.isThereAShip(...a,o,n,s.name)||i.isTooCloseToOtherShip(...a,o,n,s.name)||(s.orientation=n,i.moveShip(a,a,s),0))}(+t.target.dataset.x,+t.target.dataset.y,i)&&e.board(i,"player",!0)}function d(s){s.target.matches('[data-ship="true"]')&&(s.target.releasePointerCapture(s.pointerId),function(e,i,s){let a,n=e.target,o=!1;function r(e){e.preventDefault(),o=!0,function(e,i,s){let[a,n]=[+e.target.dataset.x,+e.target.dataset.y],[o,r]=[+e.relatedTarget.dataset.x,+e.relatedTarget.dataset.y],{x:d,y:c}=i.dataset,l=s.board[+d][+c],h=parseInt(l.length),u=l.name,p=l.orientation;isNaN(o)||s.isOutside(o,r,h,p)||function(e,i,s,a){for(let n=0;n<s;n++)document.querySelector(`div[data-board="player"] div[data-x="${e}"][data-y="${i}"]`).classList.remove(`${t.drag}`),"x"!==a?i++:e++}(o,r,h,p),e.target.dataset.drop&&(s.isOutside(a,n,h,p)||s.isThereAShip(a,n,h,p,u)||s.isTooCloseToOtherShip(a,n,h,p,u)||function(e,i,s,a){for(let n=0;n<s;n++)document.querySelector(`div[data-board="player"] div[data-x="${e}"][data-y="${i}"]`).classList.add(`${t.drag}`),"x"!==a?i++:e++}(a,n,h,p))}(e,n,i)}function d(){document.removeEventListener("pointerover",r)}document.addEventListener("pointerover",r,{passive:!1}),document.addEventListener("pointerup",(function(t){document.removeEventListener("pointerover",r),document.removeEventListener("pointercancel",d),a=t.target,o&&a.dataset.drop&&(function(t,e,i){let{x:s,y:a}=t.dataset,[n,o]=[+e.dataset.x,+e.dataset.y],r=i.board[s][a];if(!r)return;let d=parseInt(r.length),c=r.orientation,l=r.name,h=[parseInt(s),parseInt(a)],u=[n,o];i.isOutside(n,o,d,c)||i.isThereAShip(n,o,d,c,l)||i.isTooCloseToOtherShip(n,o,d,c,l)||i.moveShip(h,u,r)}(n,a,i),s(i,"player",!0))}),{once:!0}),document.addEventListener("pointercancel",d,{once:!0})}(s,i,e.board))}async function c(t){if(t.target.matches("div[data-board='computer'] div")){let e=t.target.dataset.x,o=t.target.dataset.y;await async function(t,e){document.removeEventListener("click",c);const o=s.receiveAttack([t,e]);if(!o)return;if(a.tile(o,"computer",t,e),s.thisShipSunk()&&(a.messageInfo("Enemy's ship has been sunk"),await y(1200)),a.listOfShips(s.ships,"computer"),s.areAllSunk())return void l("Player");a.messageInfo("Computer Turn"),a.toggleDimBoard("computer"),await y(1e3);const r=n.chooseCoord(),d=i.receiveAttack(r);n.changePreviousMoveStatus(d),n.changePreviousShipStatus(!1),a.tile(d,"player",...r),i.thisShipSunk()&&(n.changePreviousShipStatus(!0),a.messageInfo("Your ship has been sunk"),await y(1200)),a.listOfShips(i.ships,"player"),i.areAllSunk()?l("Computer"):(a.messageInfo("Your Turn"),a.toggleDimBoard("player"),document.addEventListener("click",c))}(e,o)}}function l(t){document.removeEventListener("click",c),a.messageInfo(`${t} Won`),e.board(s,"computer",!0)}r(i),r(s),g(i,s),document.addEventListener("click",(function(t){t.target.matches("button[data-type='restart']")&&(i=f(),s=f(),n=b(),r(i),r(s),g(i,s),document.removeEventListener("click",c),document.addEventListener("pointerdown",d),document.addEventListener("click",o))})),document.addEventListener("click",(function(t){t.target.matches('button[data-type="start"]')&&(document.removeEventListener("pointerdown",d),document.removeEventListener("click",o),document.addEventListener("click",c),a.removeCursorDrag(),a.removeDisplayNone(),a.messageInfo("Your Turn"),t.target.remove(),e.button("restart"))})),document.addEventListener("pointerdown",d,{passive:!1}),document.addEventListener("click",o)}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,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U0FBU21NLGlCQUFpQixRQUFTN0IsRUFtR3JDLENHeEhBc0MsRSIsInNvdXJjZXMiOlsid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvc3R5bGUuY3NzPzE0NTMiLCJ3ZWJwYWNrOi8vYmF0dGxlc2hpcC8uL3NyYy9WaWV3L2RvbS5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL1ZpZXcvdXBkYXRlRG9tLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvTW9kZWwvc2hpcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL01vZGVsL2dhbWVib2FyZC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL01vZGVsL3BsYXllci5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL0NvbnRyb2xsZXIvZ2FtZUxvZ2ljLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvQ29udHJvbGxlci9yb3RhdGVTaGlwLmpzIiwid2VicGFjazovL2JhdHRsZXNoaXAvLi9zcmMvQ29udHJvbGxlci9kcmFnRHJvcC5qcyIsIndlYnBhY2s6Ly9iYXR0bGVzaGlwLy4vc3JjL2luZGV4LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIGV4dHJhY3RlZCBieSBtaW5pLWNzcy1leHRyYWN0LXBsdWdpblxuZXhwb3J0IGRlZmF1bHQge1wiY29udGFpbmVyXCI6XCJreFF2YzhySjc5TG9SS0NiOG5Pd1wiLFwiYm9hcmRcIjpcIklIaXRSdW9oT0w0cWxNb0ZCa2F6XCIsXCJzaGlwXCI6XCJ4aGlqa3RkWklIa3BFYklkbnI3cVwiLFwiYWxsb3dEcmFnXCI6XCJ1bnVpSVVUcUhMbHlfaXNXTlZfZVwiLFwiZGltXCI6XCJER3p5cEJ1VzkwM3pVc2VGU0FmNFwiLFwiZHJhZ1wiOlwieGw1WDlKTENGd1ZOUl92TFdnVWFcIixcImhpdFwiOlwic01WV2I3Q1hLaXh5YkhLZzJkUnpcIixcIm1pc3NcIjpcInA5R2piRFI2a0FhNHlFcUVpS3VoXCIsXCJiaWdUaXRsZVwiOlwiS2lINDhzMWFFSUVNWWN2YzFsN1BcIixcIm1haW5Cb2FyZFdyYXBwZXJcIjpcInJwQ1gzSXgzOVdkSVV1TDJORVBnXCIsXCJib2FyZE5hbWVcIjpcInNIcHRPdndxRDhnQUZCR3FnTTR4XCIsXCJib2FyZHNDb250YWluZXJcIjpcIlFqZUU5aXg5QUZEZ0tjaTA2Mm82XCIsXCJsaXN0T2ZTaGlwc1wiOlwiS3J5ZjRmTkdzY1BhVGNiUGFCZFFcIixcImJ1dHRvbkNvbnRhaW5lclwiOlwid1Y5YVFkS0R3QkJ1eWF5WjBNUVFcIixcImxpc3RPZlNoaXBzTGVmdFwiOlwiV3A0ZG1ReDd6bTJidFBqSUxyMWEgS3J5ZjRmTkdzY1BhVGNiUGFCZFFcIixcImxpc3RPZlNoaXBzUmlnaHRcIjpcInRIVF9GQmRxQXJUU0ppZ2M2S1hWIEtyeWY0Zk5Hc2NQYVRjYlBhQmRRXCIsXCJzaGlwU3Vua1wiOlwiR0Z5RzU5VG44X3dlZEJsM3R4OFJcIixcInNtYWxsVGlsZVwiOlwiam9ETzRMN3luenp5aUJmRE81YnFcIixcIm1lc3NhZ2VJbmZvXCI6XCJIS3pMS3Q3M3FacGs2N19OTWczTFwifTsiLCJpbXBvcnQgY3NzIGZyb20gXCIuLi9zdHlsZS5jc3NcIjtcclxuXHJcbmZ1bmN0aW9uIGh0bWwoKSB7XHJcbiAgY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXCJib2R5XCIpO1xyXG4gIGJvZHkuaW5uZXJIVE1MID0gYFxyXG48aGVhZGVyPlxyXG4gIDxoMSBjbGFzcz0nJHtjc3MuYmlnVGl0bGV9Jz5CYXR0bGVzaGlwPC9oMT5cclxuPC9oZWFkZXI+XHJcbjxtYWluIGNsYXNzPScke2Nzcy5jb250YWluZXJ9Jz5cclxuICA8c2VjdGlvbiBjbGFzcz0nJHtjc3MubWVzc2FnZUluZm99Jz5cclxuICAgIDxwPkRyYWcgc2hpcCB0byBtb3ZlIDxicj4gQ2xpY2sgc2hpcCB0byByb3RhdGU8L3A+XHJcbiAgPC9zZWN0aW9uPlxyXG4gIDxzZWN0aW9uIGNsYXNzPScke2Nzcy5ib2FyZHNDb250YWluZXJ9Jz5cclxuICAgIDxzZWN0aW9uIGNsYXNzPScke2Nzcy5tYWluQm9hcmRXcmFwcGVyfScgZGF0YS1ib2FyZD0ncGxheWVyJz5cclxuICAgICAgICA8ZGl2IGNsYXNzPScke2Nzcy5saXN0T2ZTaGlwc0xlZnR9JyBkYXRhLWJvYXJkPSdwbGF5ZXInIHN0eWxlPSdkaXNwbGF5Om5vbmUnPjwvZGl2PlxyXG4gICAgICA8c2VjdGlvbiBjbGFzcz0nJHtjc3MuYm9hcmRXcmFwcGVyfSc+XHJcbiAgICAgICAgPGRpdiBjbGFzcz0nJHtjc3MuYm9hcmR9JyBkYXRhLWJvYXJkPSdwbGF5ZXInIG9uZHJhZ3N0YXJ0PVwiKCkgPT4gZmFsc2VcIj48L2Rpdj5cclxuICAgICAgICA8aDMgY2xhc3M9JyR7Y3NzLmJvYXJkTmFtZX0nPlBMQVlFUjwvaDM+XHJcbiAgICAgIDwvc2VjdGlvbj5cclxuICAgIDwvc2VjdGlvbj5cclxuICAgIDxzZWN0aW9uIGNsYXNzPScke2Nzcy5tYWluQm9hcmRXcmFwcGVyfScgZGF0YS1ib2FyZD0nY29tcHV0ZXInIHN0eWxlPSdkaXNwbGF5Om5vbmUnPlxyXG4gICAgICA8c2VjdGlvbiBjbGFzcz0nJHtjc3MuYm9hcmRXcmFwcGVyfSc+XHJcbiAgICAgICAgPGRpdiBjbGFzcz0nJHtjc3MuYm9hcmR9JyBkYXRhLWJvYXJkPSdjb21wdXRlcicgb25kcmFnc3RhcnQ9XCIoKSA9PiBmYWxzZVwiPjwvZGl2PlxyXG4gICAgICAgIDxoMyBjbGFzcz0nJHtjc3MuYm9hcmROYW1lfSc+Q09NUFVURVI8L2gzPlxyXG4gICAgICA8L3NlY3Rpb24+XHJcbiAgICAgICAgPGRpdiBjbGFzcz0nJHtjc3MubGlzdE9mU2hpcHNSaWdodH0nIGRhdGEtYm9hcmQ9J2NvbXB1dGVyJyBzdHlsZT0nZGlzcGxheTpub25lJz48L2Rpdj5cclxuICAgIDwvc2VjdGlvbj5cclxuICA8L3NlY3Rpb24+XHJcbiAgPHNlY3Rpb24gY2xhc3M9JyR7Y3NzLmJ1dHRvbkNvbnRhaW5lcn0nPlxyXG4gICAgPGJ1dHRvbiB0eXBlPSdidXR0b24nZGF0YS10eXBlPSdzdGFydCc+U3RhcnQ8L2J1dHRvbj5cclxuICA8L3NlY3Rpb24+XHJcbjwvbWFpbj5cclxuYDtcclxufVxyXG5cclxuZnVuY3Rpb24gYnV0dG9uKHR5cGUpIHtcclxuICBjb25zdCBjb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKGAuJHtjc3MuYnV0dG9uQ29udGFpbmVyfWApO1xyXG4gIGNvbnN0IGJ0biA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJidXR0b25cIik7XHJcbiAgYnRuLnNldEF0dHJpYnV0ZShcInR5cGVcIiwgXCJidXR0b25cIik7XHJcbiAgYnRuLnNldEF0dHJpYnV0ZShcImRhdGEtdHlwZVwiLCB0eXBlKTtcclxuICBidG4uaW5uZXJUZXh0ID0gdHlwZVswXS50b1VwcGVyQ2FzZSgpLmNvbmNhdCh0eXBlLnNsaWNlKDEpKTtcclxuICBjb250YWluZXIuYXBwZW5kKGJ0bik7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGJvYXJkKGdhbWVib2FyZCwgdXNlciwgc2hvd1NoaXApIHtcclxuICBsZXQgZG9tYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgYGRpdltkYXRhLWJvYXJkPVwiJHt1c2VyfVwiXS4ke2Nzcy5ib2FyZH1gLFxyXG4gICk7XHJcbiAgZG9tYm9hcmQuaW5uZXJIVE1MID0gXCJcIjtcclxuICBmb3IgKGxldCB5ID0gOTsgeSA+PSAwOyB5LS0pIHtcclxuICAgIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHgrKykge1xyXG4gICAgICBsZXQgdGlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIik7XHJcbiAgICAgIHRpbGUuc2V0QXR0cmlidXRlKFwiZGF0YS14XCIsIHgpO1xyXG4gICAgICB0aWxlLnNldEF0dHJpYnV0ZShcImRhdGEteVwiLCB5KTtcclxuICAgICAgdGlsZS5vbmRyYWdzdGFydCA9ICgpID0+IGZhbHNlO1xyXG4gICAgICBpZiAodXNlciA9PT0gXCJwbGF5ZXJcIikge1xyXG4gICAgICAgIHRpbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1kcm9wXCIsIHRydWUpO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0eXBlb2YgZ2FtZWJvYXJkLmJvYXJkW3hdW3ldID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgICAgaWYgKHNob3dTaGlwKSB7XHJcbiAgICAgICAgICB0aWxlLmNsYXNzTGlzdC5hZGQoYCR7Y3NzLnNoaXB9YCk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICh1c2VyID09PSBcInBsYXllclwiKSB7XHJcbiAgICAgICAgICB0aWxlLmNsYXNzTGlzdC5hZGQoYCR7Y3NzLmFsbG93RHJhZ31gKTtcclxuICAgICAgICAgIC8vIE5PVEU6IGR1bm5vIHdoeSBpIHdyb3RlIHRoaXNcclxuICAgICAgICAgIGlmICh1c2VyID09PSBcInBsYXllclwiKSB7XHJcbiAgICAgICAgICAgIHRpbGUuc2V0QXR0cmlidXRlKFwiZGF0YS1zaGlwXCIsIHRydWUpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoZ2FtZWJvYXJkLmJvYXJkW3hdW3ldID09PSBcIm1pc3NlZFwiKSB7XHJcbiAgICAgICAgdGlsZS5jbGFzc0xpc3QuYWRkKGAke2Nzcy5taXNzfWApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChnYW1lYm9hcmQuYm9hcmRbeF1beV0gPT09IFwiaGl0XCIpIHtcclxuICAgICAgICB0aWxlLmNsYXNzTGlzdC5hZGQoYCR7Y3NzLmhpdH1gKTtcclxuICAgICAgfVxyXG4gICAgICBkb21ib2FyZC5hcHBlbmQodGlsZSk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5mdW5jdGlvbiBsaXN0T2ZTaGlwcyhzaGlwcywgdXNlcikge1xyXG4gIGNvbnN0IGxpc3QgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgYGRpdltkYXRhLWJvYXJkPScke3VzZXJ9J10uJHtjc3MubGlzdE9mU2hpcHN9YCxcclxuICApO1xyXG4gIGxpc3QuaW5uZXJUZXh0ID0gXCJcIjtcclxuICBmb3IgKGxldCBzaGlwIG9mIHNoaXBzKSB7XHJcbiAgICBjb25zdCBkaXZTaGlwID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgIGRpdlNoaXAuc2V0QXR0cmlidXRlKFwiZGF0YS1zaGlwXCIsIHNoaXAubmFtZSk7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHNoaXAubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3Qgc21hbGxUaWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKTtcclxuICAgICAgc21hbGxUaWxlLmNsYXNzTGlzdC5hZGQoYCR7Y3NzLnNtYWxsVGlsZX1gKTtcclxuICAgICAgZGl2U2hpcC5hcHBlbmQoc21hbGxUaWxlKTtcclxuICAgIH1cclxuICAgIGxpc3QuYXBwZW5kKGRpdlNoaXApO1xyXG4gIH1cclxufVxyXG5cclxubGV0IHJlbmRlciA9IHtcclxuICBodG1sLFxyXG4gIGJvYXJkLFxyXG4gIGxpc3RPZlNoaXBzLFxyXG4gIGJ1dHRvbixcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgcmVuZGVyO1xyXG4iLCJpbXBvcnQgY3NzIGZyb20gXCIuLi9zdHlsZS5jc3NcIjtcclxuZnVuY3Rpb24gaGl0KHVzZXIsIHgsIHkpIHtcclxuICBsZXQgdGlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICBgZGl2W2RhdGEtYm9hcmQ9JyR7dXNlcn0nXSBkaXZbZGF0YS14PScke3h9J11bZGF0YS15PScke3l9J11gLFxyXG4gICk7XHJcbiAgdGlsZS5jbGFzc0xpc3QucmVtb3ZlKGAke2Nzcy5zaGlwfWApO1xyXG4gIHRpbGUuY2xhc3NMaXN0LmFkZChgJHtjc3MuaGl0fWApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBtaXNzKHVzZXIsIHgsIHkpIHtcclxuICBsZXQgdGlsZSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICBgZGl2W2RhdGEtYm9hcmQ9JyR7dXNlcn0nXSBkaXZbZGF0YS14PScke3h9J11bZGF0YS15PScke3l9J11gLFxyXG4gICk7XHJcbiAgdGlsZS5jbGFzc0xpc3QucmVtb3ZlKGAke2Nzcy5kaXNhYmxlZH1gKTtcclxuICB0aWxlLmNsYXNzTGlzdC5hZGQoYCR7Y3NzLm1pc3N9YCk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRpbGUocmVzdWx0LCB1c2VyLCB4LCB5KSB7XHJcbiAgaWYgKHJlc3VsdCA9PT0gXCJtaXNzZWRcIikge1xyXG4gICAgbWlzcyh1c2VyLCB4LCB5KTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbiAgaWYgKHJlc3VsdCA9PT0gXCJoaXRcIikge1xyXG4gICAgaGl0KHVzZXIsIHgsIHkpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxufVxyXG5mdW5jdGlvbiBsaXN0T2ZTaGlwcyhzaGlwcywgdXNlcikge1xyXG4gIGZvciAobGV0IHNoaXAgb2Ygc2hpcHMpIHtcclxuICAgIGNvbnN0IGRpdlNoaXAgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgZGl2W2RhdGEtYm9hcmQ9JyR7dXNlcn0nXSBkaXZbZGF0YS1zaGlwPScke3NoaXAubmFtZX0nXWAsXHJcbiAgICApO1xyXG4gICAgaWYgKHNoaXAuaXNTdW5rKCkpIHtcclxuICAgICAgZGl2U2hpcC5jbGFzc0xpc3QuYWRkKGAke2Nzcy5zaGlwU3Vua31gKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHRvZ2dsZURpbUJvYXJkKG5hbWUpIHtcclxuICBsZXQgYm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgYHNlY3Rpb25bZGF0YS1ib2FyZD0nJHtuYW1lfSddLiR7Y3NzLm1haW5Cb2FyZFdyYXBwZXJ9YCxcclxuICApO1xyXG4gIGRpbUJvYXJkKGJvYXJkKTtcclxuICBpZiAobmFtZSA9PT0gXCJwbGF5ZXJcIikge1xyXG4gICAgbGV0IGVuZW15Qm9hcmQgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgc2VjdGlvbltkYXRhLWJvYXJkPSdjb21wdXRlciddLiR7Y3NzLm1haW5Cb2FyZFdyYXBwZXJ9YCxcclxuICAgICk7XHJcbiAgICB1bmRpbUJvYXJkKGVuZW15Qm9hcmQpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBsZXQgZW5lbXlCb2FyZCA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoXHJcbiAgICBgc2VjdGlvbltkYXRhLWJvYXJkPSdwbGF5ZXInXS4ke2Nzcy5tYWluQm9hcmRXcmFwcGVyfWAsXHJcbiAgKTtcclxuICB1bmRpbUJvYXJkKGVuZW15Qm9hcmQpO1xyXG59XHJcblxyXG5mdW5jdGlvbiBkaW1Cb2FyZChib2FyZCkge1xyXG4gIGJvYXJkLmNsYXNzTGlzdC5hZGQoYCR7Y3NzLmRpbX1gKTtcclxufVxyXG5mdW5jdGlvbiB1bmRpbUJvYXJkKGJvYXJkKSB7XHJcbiAgYm9hcmQuY2xhc3NMaXN0LnJlbW92ZShgJHtjc3MuZGltfWApO1xyXG59XHJcblxyXG5mdW5jdGlvbiBpbmZvKHJlc3VsdCkge1xyXG4gIGlmIChyZXN1bHQgPT09IFwibWlzc2VkXCIpIHtcclxuICAgIG1lc3NhZ2VJbmZvKFwiWW91IGZpcmVkIGEgc2hvdCBhbmQgbWlzc2VzXCIpO1xyXG4gICAgcmV0dXJuO1xyXG4gIH1cclxuICBpZiAocmVzdWx0ID09PSBcImhpdFwiKSB7XHJcbiAgICBtZXNzYWdlSW5mbyhcIllvdSBmaXJlZCBhIHNob3QgYW5kIGl0cyBhIGhpdFwiKTtcclxuICAgIHJldHVybjtcclxuICB9XHJcbn1cclxuZnVuY3Rpb24gbWVzc2FnZUluZm8obWVzc2FnZSkge1xyXG4gIGxldCBtc2dJbmZvID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihgLiR7Y3NzLm1lc3NhZ2VJbmZvfSBwYCk7XHJcbiAgbXNnSW5mby5pbm5lclRleHQgPSBtZXNzYWdlO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZW1vdmVEaXNwbGF5Tm9uZSgpIHtcclxuICBsZXQgbm9uZXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKGBbc3R5bGU9J2Rpc3BsYXk6bm9uZSddYCk7XHJcbiAgbm9uZXMuZm9yRWFjaCgobm9uZSkgPT4ge1xyXG4gICAgbm9uZS5yZW1vdmVBdHRyaWJ1dGUoXCJzdHlsZVwiKTtcclxuICB9KTtcclxufVxyXG5cclxuZnVuY3Rpb24gcmVtb3ZlQ3Vyc29yRHJhZygpIHtcclxuICBsZXQgc2hpcHMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKFxyXG4gICAgYGRpdltkYXRhLWJvYXJkPSdwbGF5ZXInXSBkaXYuJHtjc3Muc2hpcH1gLFxyXG4gICk7XHJcbiAgc2hpcHMuZm9yRWFjaCgoc2hpcCkgPT4ge1xyXG4gICAgc2hpcC5jbGFzc0xpc3QucmVtb3ZlKGAke2Nzcy5hbGxvd0RyYWd9YCk7XHJcbiAgfSk7XHJcbn1cclxuY29uc3QgdXBkYXRlRG9tID0ge1xyXG4gIHRpbGUsXHJcbiAgbGlzdE9mU2hpcHMsXHJcbiAgcmVtb3ZlQ3Vyc29yRHJhZyxcclxuICByZW1vdmVEaXNwbGF5Tm9uZSxcclxuICBtZXNzYWdlSW5mbyxcclxuICBpbmZvLFxyXG4gIHRvZ2dsZURpbUJvYXJkLFxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgdXBkYXRlRG9tO1xyXG4iLCJpbXBvcnQgeyBnZXRBbGxDb29yZCB9IGZyb20gXCIuL2dhbWVib2FyZFwiO1xyXG5cclxuY29uc3QgcHJvdG8gPSB7XHJcbiAgaXNTdW5rOiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAoIXRoaXMuaGVhbHRoKSB7XHJcbiAgICAgIHRoaXMuc3VuayA9IHRydWU7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0sXHJcbiAgaGl0OiBmdW5jdGlvbiAoKSB7XHJcbiAgICBpZiAodGhpcy5oZWFsdGgpIHRoaXMuaGVhbHRoLS07XHJcbiAgfSxcclxufTtcclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gY3JlYXRlU2hpcCh7IGxlbmd0aCwgbmFtZSwgb3JpZW50LCBzaGlwUG9zaXRpb24gfSkge1xyXG4gIGNvbnN0IG9iaiA9IE9iamVjdC5jcmVhdGUocHJvdG8pO1xyXG4gIG9iai5sZW5ndGggPSBsZW5ndGg7XHJcbiAgb2JqLm5hbWUgPSBuYW1lO1xyXG4gIG9iai5oZWFsdGggPSBsZW5ndGg7XHJcbiAgb2JqLnN1bmsgPSBmYWxzZTtcclxuICBvYmoub3JpZW50YXRpb24gPSBvcmllbnQ7XHJcbiAgb2JqLnBvc2l0aW9uID0gc2hpcFBvc2l0aW9uO1xyXG4gIHJldHVybiBvYmo7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBob2xkU2hpcFBvc2l0aW9uKHgsIHksIG9yaWVudGF0aW9uLCBsZW5ndGgpIHtcclxuICBjb25zdCBwb3NpdGlvbiA9IHt9O1xyXG4gIHBvc2l0aW9uLmxpc3RDb29yZGluYXRlID0gW107XHJcbiAgcG9zaXRpb24uaGVhZCA9IFt4LCB5XTtcclxuICBwb3NpdGlvbi50YWlsID0gW3ggKyBsZW5ndGggLSAxLCB5XTtcclxuICBpZiAob3JpZW50YXRpb24gPT09IFwieVwiKSB7XHJcbiAgICBwb3NpdGlvbi50YWlsID0gW3gsIHkgKyBsZW5ndGggLSAxXTtcclxuICB9XHJcbiAgcmV0dXJuIHBvc2l0aW9uO1xyXG59XHJcblxyXG5mdW5jdGlvbiBnZXRTaGlwQ2xvc3VyZSgpIHtcclxuICBsZXQgaW5kZXggPSAwO1xyXG4gIHJldHVybiBmdW5jdGlvbiAoKSB7XHJcbiAgICBsZXQgc2hpcHMgPSBbXHJcbiAgICAgIHsgbmFtZTogXCJDYXJyaWVyXCIsIGxlbmd0aDogNSB9LFxyXG4gICAgICB7IG5hbWU6IFwiQmF0dGxlc2hpcFwiLCBsZW5ndGg6IDQgfSxcclxuICAgICAgeyBuYW1lOiBcIkRlc3Ryb3llclwiLCBsZW5ndGg6IDMgfSxcclxuICAgICAgeyBuYW1lOiBcIlN1Ym1hcmluZVwiLCBsZW5ndGg6IDMgfSxcclxuICAgICAgeyBuYW1lOiBcIlBhdHJvbFwiLCBsZW5ndGg6IDIgfSxcclxuICAgIF07XHJcbiAgICBpZiAoaW5kZXggPiBzaGlwcy5sZW5ndGggLSAxKSB7XHJcbiAgICAgIGluZGV4ID0gMDtcclxuICAgIH1cclxuICAgIHJldHVybiBzaGlwc1tpbmRleCsrXTtcclxuICB9O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gaW5pdFBsYWNlU2hpcChib2FyZCkge1xyXG4gIGNvbnN0IGdldFNoaXAgPSBnZXRTaGlwQ2xvc3VyZSgpO1xyXG4gIGxldCBtb3ZlcyA9IGdldEFsbENvb3JkKCk7XHJcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCA1OyBpKyspIHtcclxuICAgIGNvbnN0IHNoaXAgPSBnZXRTaGlwKCk7XHJcbiAgICBsZXQgeyBjb29yZGluYXRlLCBvcmllbnQgfSA9IHRyeVBsYWNlU2hpcChib2FyZCwgc2hpcCwgbW92ZXMsIFwieFwiKTtcclxuICAgIHJlbW92ZUNvb3JkaW5hdGUobW92ZXMsIHNoaXAubGVuZ3RoLCBjb29yZGluYXRlLCBvcmllbnQpO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gdHJ5UGxhY2VTaGlwKGJvYXJkLCBzaGlwLCBtb3Zlcywgb3JpZW50KSB7XHJcbiAgbGV0IFt4LCB5XSA9IHBpY2tDb29yZGluYXRlKG1vdmVzLCBzaGlwLmxlbmd0aCk7XHJcbiAgbGV0IHNoaXBQb3NpdGlvbiA9IGhvbGRTaGlwUG9zaXRpb24oeCwgeSwgb3JpZW50LCBzaGlwLmxlbmd0aCk7XHJcbiAgbGV0IHJlc3VsdCA9IGJvYXJkLnBsYWNlU2hpcChjcmVhdGVTaGlwKHsgLi4uc2hpcCwgc2hpcFBvc2l0aW9uLCBvcmllbnQgfSkpO1xyXG4gIC8vIHJhbmRvbWlzZSB0aGUgb3JpZW50YXRpb25cclxuICBpZiAob3JpZW50ID09PSBcInhcIikge1xyXG4gICAgb3JpZW50ID0gXCJ5XCI7XHJcbiAgfSBlbHNlIHtcclxuICAgIG9yaWVudCA9IFwieFwiO1xyXG4gIH1cclxuICAvLyB0cnkgYWdhaW4gaWYgZmFpbFxyXG4gIGlmICghcmVzdWx0KSB7XHJcbiAgICByZXR1cm4gdHJ5UGxhY2VTaGlwKGJvYXJkLCBzaGlwLCBtb3Zlcywgb3JpZW50KTtcclxuICB9XHJcbiAgcmV0dXJuIHsgY29vcmRpbmF0ZTogW3gsIHldLCBvcmllbnQgfTtcclxufVxyXG5cclxuZnVuY3Rpb24gcGlja0Nvb3JkaW5hdGUobW92ZXMpIHtcclxuICBsZXQgaW5kZXggPSBNYXRoLmZsb29yKE1hdGgucmFuZG9tKCkgKiAobW92ZXMubGVuZ3RoIC0gMSkpO1xyXG4gIGxldCBjb29yZCA9IG1vdmVzW2luZGV4XTtcclxuICByZXR1cm4gY29vcmQ7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbW92ZUNvb3JkaW5hdGUobW92ZXMsIGxlbmd0aCwgY29vcmQsIG9yaWVudCkge1xyXG4gIGxldCBjb3BpZWRDb29yZGluYXRlID0gY29vcmQuc2xpY2UoKTtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICBpZiAob3JpZW50ID09PSBcInhcIikge1xyXG4gICAgICBtb3Zlcy5zcGxpY2UoXHJcbiAgICAgICAgbW92ZXMuaW5kZXhPZihbY29waWVkQ29vcmRpbmF0ZVswXSsrLCBjb3BpZWRDb29yZGluYXRlWzFdXSksXHJcbiAgICAgICAgMSxcclxuICAgICAgKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIG1vdmVzLnNwbGljZShcclxuICAgICAgICBtb3Zlcy5pbmRleE9mKFtjb3BpZWRDb29yZGluYXRlWzBdLCBjb3BpZWRDb29yZGluYXRlWzFdKytdKSxcclxuICAgICAgICAxLFxyXG4gICAgICApO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG4iLCJpbXBvcnQgeyBob2xkU2hpcFBvc2l0aW9uIH0gZnJvbSBcIi4vc2hpcFwiO1xyXG5leHBvcnQgZnVuY3Rpb24gZ2V0QWxsQ29vcmQoKSB7XHJcbiAgbGV0IGFyciA9IFtdO1xyXG4gIGZvciAobGV0IHggPSAwOyB4IDwgMTA7IHgrKykge1xyXG4gICAgZm9yIChsZXQgeSA9IDA7IHkgPCAxMDsgeSsrKSB7XHJcbiAgICAgIGFyci5wdXNoKFt4LCB5XSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBhcnI7XHJcbn1cclxuXHJcbmNvbnN0IHByb3RvID0ge1xyXG4gIHBsYWNlU2hpcChzaGlwKSB7XHJcbiAgICBsZXQgbGVuZ3RoID0gc2hpcC5sZW5ndGg7XHJcbiAgICBsZXQgb3JpZW50YXRpb24gPSBzaGlwLm9yaWVudGF0aW9uO1xyXG4gICAgbGV0IG5hbWUgPSBzaGlwLm5hbWU7XHJcbiAgICBsZXQgW3gsIHldID0gc2hpcC5wb3NpdGlvbi5oZWFkO1xyXG4gICAgbGV0IGxzQ29vcmQgPSBzaGlwLnBvc2l0aW9uLmxpc3RDb29yZGluYXRlO1xyXG4gICAgLy8gV0FSTjogaWYgdSBtb3ZlIHRoaXMgdG8gaW5pdCBwbGFjZSBzaGlwLCBpdCBicm9rZSBbXHJcbiAgICBpZiAodGhpcy5pc091dHNpZGUoeCwgeSwgbGVuZ3RoLCBvcmllbnRhdGlvbikpIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG4gICAgaWYgKHRoaXMuaXNUaGVyZUFTaGlwKHgsIHksIGxlbmd0aCwgb3JpZW50YXRpb24sIG5hbWUpKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIGlmICh0aGlzLmlzVG9vQ2xvc2VUb090aGVyU2hpcCh4LCB5LCBsZW5ndGgsIG9yaWVudGF0aW9uLCBuYW1lKSkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRoaXMuYm9hcmRbeF1beV0gPSBzaGlwO1xyXG4gICAgICAvLyBwdXNoIHNoaXAgY29vcmRpbmF0ZSB0byBhcnJcclxuICAgICAgbHNDb29yZC5wdXNoKHsgeCwgeSB9KTtcclxuICAgICAgaWYgKG9yaWVudGF0aW9uID09PSBcInhcIikge1xyXG4gICAgICAgIHgrKztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICB5Kys7XHJcbiAgICB9XHJcbiAgICB0aGlzLnNoaXBzLnB1c2goc2hpcCk7XHJcbiAgICByZXR1cm4gdHJ1ZTtcclxuICB9LFxyXG4gIG1vdmVTaGlwKGZyb20sIHRvLCBzaGlwT2JqZWN0KSB7XHJcbiAgICB0aGlzLnJlbW92ZVNoaXAoLi4uZnJvbSk7XHJcbiAgICAvLyBUT0RPOiBjaGFuZ2UgaG9sZHNoaXBwb3NpdGlvbiBmdW5jdGlvblxyXG4gICAgbGV0IG5ld1Bvc2l0aW9uID0gaG9sZFNoaXBQb3NpdGlvbihcclxuICAgICAgLi4udG8sXHJcbiAgICAgIHNoaXBPYmplY3Qub3JpZW50YXRpb24sXHJcbiAgICAgIHNoaXBPYmplY3QubGVuZ3RoLFxyXG4gICAgKTtcclxuICAgIHNoaXBPYmplY3QucG9zaXRpb24gPSBuZXdQb3NpdGlvbjtcclxuICAgIHRoaXMucGxhY2VTaGlwKHNoaXBPYmplY3QpO1xyXG4gIH0sXHJcbiAgaXNUb29DbG9zZVRvT3RoZXJTaGlwKHgsIHksIGxlbmd0aCwgb3JpZW50YXRpb24sIG5hbWUpIHtcclxuICAgIC8vIFRPRE86IHJlZmFjdG9yIHRoaXNcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGVuZ3RoOyBpKyspIHtcclxuICAgICAgZm9yIChsZXQgbm9kZSBvZiB0aGlzLmdyYXBoW2Ake3h9LCR7eX1gXSkge1xyXG4gICAgICAgIGxldCBbYSwgYl0gPSBub2RlLnNwbGl0KFwiLFwiKTtcclxuICAgICAgICBpZiAoXHJcbiAgICAgICAgICB0eXBlb2YgdGhpcy5ib2FyZFthXVtiXSA9PT0gXCJvYmplY3RcIiAmJlxyXG4gICAgICAgICAgdGhpcy5ib2FyZFthXVtiXS5uYW1lICE9PSBuYW1lXHJcbiAgICAgICAgKSB7XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG9yaWVudGF0aW9uID09PSBcInhcIikge1xyXG4gICAgICAgIHgrKztcclxuICAgICAgICBjb250aW51ZTtcclxuICAgICAgfVxyXG4gICAgICB5Kys7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbiAgfSxcclxuICBpc1RoZXJlQVNoaXAoeCwgeSwgbGVuZ3RoLCBvcmllbnQsIHNoaXBOYW1lKSB7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0eXBlb2YgdGhpcy5ib2FyZFt4XVt5XSA9PT0gXCJvYmplY3RcIiAmJlxyXG4gICAgICAgIHRoaXMuYm9hcmRbeF1beV0ubmFtZSAhPT0gc2hpcE5hbWVcclxuICAgICAgKSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG9yaWVudCA9PT0gXCJ4XCIpIHtcclxuICAgICAgICB4Kys7XHJcbiAgICAgICAgY29udGludWU7XHJcbiAgICAgIH1cclxuICAgICAgeSsrO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0sXHJcbiAgcmVtb3ZlU2hpcCh4LCB5KSB7XHJcbiAgICBsZXQgc2hpcCA9IHRoaXMuYm9hcmRbeF1beV07XHJcbiAgICBmb3IgKGxldCBjb29yZCBvZiBzaGlwLnBvc2l0aW9uLmxpc3RDb29yZGluYXRlKSB7XHJcbiAgICAgIHRoaXMuYm9hcmRbY29vcmQueF1bY29vcmQueV0gPSB1bmRlZmluZWQ7XHJcbiAgICB9XHJcbiAgICBsZXQgaW5kZXggPSB0aGlzLnNoaXBzLmluZGV4T2Yoc2hpcCk7XHJcbiAgICB0aGlzLnNoaXBzLnNwbGljZShpbmRleCwgMSk7XHJcbiAgfSxcclxuICBpc091dHNpZGUoeCwgeSwgbGVuZ3RoLCBvcmllbnQpIHtcclxuICAgIC8vIGNoZWNrIGlmIGhlYWQgaXMgb3V0c2lkZSB0aGUgYm9hcmRcclxuICAgIGlmICh4IDwgMCB8fCB4ID4gOSB8fCB5IDwgMCB8fCB5ID4gOSkge1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIC8vIGNoZWNrIGlmIHRhaWwgaXMgb3V0c2lkZSB0aGUgYm9hcmRcclxuICAgIGlmIChvcmllbnQgPT09IFwieFwiKSB7XHJcbiAgICAgIGlmICh4ICsgbGVuZ3RoIC0gMSA+IDkpIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICB9XHJcbiAgICBpZiAoeSArIGxlbmd0aCAtIDEgPiA5KSB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH0sXHJcbiAgcmVjZWl2ZUF0dGFjayhbeCwgeV0pIHtcclxuICAgIGxldCBpbmZvO1xyXG4gICAgaWYgKHRoaXMuaXNPdXRzaWRlKHgsIHkpKSByZXR1cm4gZmFsc2U7XHJcbiAgICBpZiAodGhpcy5ib2FyZFt4XVt5XSA9PT0gXCJoaXRcIikgcmV0dXJuIGZhbHNlO1xyXG4gICAgaWYgKHR5cGVvZiB0aGlzLmJvYXJkW3hdW3ldID09PSBcIm9iamVjdFwiKSB7XHJcbiAgICAgIHRoaXMuYm9hcmRbeF1beV0uaGl0KCk7XHJcbiAgICAgIGluZm8gPSBcImhpdFwiO1xyXG4gICAgICB0aGlzLmF0dGFjay5wdXNoKHsgeCwgeSB9KTtcclxuICAgICAgdGhpcy5ib2FyZFt4XVt5XSA9IFwiaGl0XCI7XHJcbiAgICB9XHJcbiAgICBpZiAodGhpcy5ib2FyZFt4XVt5XSA9PT0gdW5kZWZpbmVkKSB7XHJcbiAgICAgIGluZm8gPSBcIm1pc3NlZFwiO1xyXG4gICAgICB0aGlzLm1pc3NlZEF0dGFjay5wdXNoKHsgeCwgeSB9KTtcclxuICAgICAgdGhpcy5ib2FyZFt4XVt5XSA9IFwibWlzc2VkXCI7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gaW5mbztcclxuICB9LFxyXG4gIGFyZUFsbFN1bmsoKSB7XHJcbiAgICBsZXQgbnVtT2ZTdW5rU2hpcCA9IHRoaXMuY2hlY2tTaGlwKCk7XHJcbiAgICBpZiAodGhpcy5zaGlwcy5sZW5ndGggLSBudW1PZlN1bmtTaGlwKSB7XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH1cclxuICAgIHJldHVybiB0cnVlO1xyXG4gIH0sXHJcbiAgdGhpc1NoaXBTdW5rKCkge1xyXG4gICAgbGV0IG51bU9mU3Vua1NoaXAgPSB0aGlzLmNoZWNrU2hpcCgpO1xyXG4gICAgaWYgKHRoaXMubnVtT2ZTdW5rU2hpcCAhPT0gbnVtT2ZTdW5rU2hpcCkge1xyXG4gICAgICB0aGlzLm51bU9mU3Vua1NoaXAgPSBudW1PZlN1bmtTaGlwO1xyXG4gICAgICByZXR1cm4gdHJ1ZTtcclxuICAgIH1cclxuICAgIHJldHVybiBmYWxzZTtcclxuICB9LFxyXG4gIGNoZWNrU2hpcCgpIHtcclxuICAgIGxldCBudW1PZlN1bmtTaGlwID0gMDtcclxuICAgIGZvciAobGV0IHNoaXAgb2YgdGhpcy5zaGlwcykge1xyXG4gICAgICBpZiAoc2hpcC5pc1N1bmsoKSkge1xyXG4gICAgICAgIG51bU9mU3Vua1NoaXArKztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG51bU9mU3Vua1NoaXA7XHJcbiAgfSxcclxuICByZXNldCgpIHtcclxuICAgIHRoaXMubWlzc2VkQXR0YWNrID0gW107XHJcbiAgICB0aGlzLmF0dGFjayA9IFtdO1xyXG4gICAgdGhpcy5ib2FyZCA9IGNyZWF0ZUJvYXJkKCk7XHJcbiAgICB0aGlzLnNoaXBzID0gW107XHJcbiAgICB0aGlzLmdyYXBoID0gY3JlYXRlR3JhcGgoKTtcclxuICB9LFxyXG59O1xyXG5cclxuZnVuY3Rpb24gY3JlYXRlR3JhcGgoKSB7XHJcbiAgbGV0IGdyYXBoID0ge307XHJcbiAgZm9yIChsZXQgeCA9IDA7IHggPCAxMDsgeCsrKSB7XHJcbiAgICBmb3IgKGxldCB5ID0gMDsgeSA8IDEwOyB5KyspIHtcclxuICAgICAgbGV0IHZlcnRleCA9IHJldHVyblBvc3NpYmxlTW92ZXMoeCwgeSk7XHJcbiAgICAgIGdyYXBoW2Ake3h9LCR7eX1gXSA9IHZlcnRleDtcclxuICAgIH1cclxuICB9XHJcbiAgcmV0dXJuIGdyYXBoO1xyXG59XHJcblxyXG5mdW5jdGlvbiByZXR1cm5Qb3NzaWJsZU1vdmVzKHgsIHkpIHtcclxuICBsZXQgYXJyID0gW107XHJcbiAgYXJyLnB1c2goYCR7eCArIDF9LCR7eX1gKTtcclxuICBhcnIucHVzaChgJHt4IC0gMX0sJHt5fWApO1xyXG4gIGFyci5wdXNoKGAke3h9LCR7eSArIDF9YCk7XHJcbiAgYXJyLnB1c2goYCR7eH0sJHt5IC0gMX1gKTtcclxuICBhcnIucHVzaChgJHt4ICsgMX0sJHt5ICsgMX1gKTtcclxuICBhcnIucHVzaChgJHt4ICsgMX0sJHt5IC0gMX1gKTtcclxuICBhcnIucHVzaChgJHt4IC0gMX0sJHt5ICsgMX1gKTtcclxuICBhcnIucHVzaChgJHt4IC0gMX0sJHt5IC0gMX1gKTtcclxuXHJcbiAgcmV0dXJuIGFyci5maWx0ZXIoKG4pID0+IHtcclxuICAgIGxldCBjb29yID0gbi5zcGxpdChcIixcIik7XHJcbiAgICBpZiAoY29vclswXSA8IDEwICYmIGNvb3JbMF0gPiAtMSkge1xyXG4gICAgICBpZiAoY29vclsxXSA8IDEwICYmIGNvb3JbMV0gPiAtMSkge1xyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfSk7XHJcbn1cclxuZnVuY3Rpb24gY3JlYXRlQm9hcmQoKSB7XHJcbiAgbGV0IGFyciA9IFtdO1xyXG4gIGZvciAobGV0IGkgPSAwOyBpIDwgMTA7IGkrKykge1xyXG4gICAgYXJyLnB1c2goW10pO1xyXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCAxMDsgaisrKSB7XHJcbiAgICAgIGFycltpXS5wdXNoKHVuZGVmaW5lZCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJldHVybiBhcnI7XHJcbn1cclxuXHJcbmV4cG9ydCBkZWZhdWx0IGZ1bmN0aW9uIGNyZWF0ZUdhbWVib2FyZCgpIHtcclxuICBjb25zdCBvYmogPSBPYmplY3QuY3JlYXRlKHByb3RvKTtcclxuICBvYmoubWlzc2VkQXR0YWNrID0gW107XHJcbiAgb2JqLmF0dGFjayA9IFtdO1xyXG4gIG9iai5ib2FyZCA9IGNyZWF0ZUJvYXJkKCk7XHJcbiAgb2JqLnNoaXBzID0gW107XHJcbiAgb2JqLm51bU9mU3Vua1NoaXAgPSAwO1xyXG4gIG9iai5ncmFwaCA9IGNyZWF0ZUdyYXBoKCk7XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG4iLCJpbXBvcnQgeyBnZXRBbGxDb29yZCB9IGZyb20gXCIuL2dhbWVib2FyZFwiO1xyXG5cclxubGV0IHByb3RvID0ge1xyXG4gIGNob29zZUNvb3JkKCkge1xyXG4gICAgbGV0IFtjb29yZGluYXRlLCBpbmRleF0gPSB0aGlzLmF0dGFja1JhbmRvbSgpO1xyXG4gICAgaWYgKFxyXG4gICAgICB0aGlzLmlzUHJldmlvdXNNb3ZlSGl0IHx8XHJcbiAgICAgIHRoaXMuc3RhY2tbXCJ4XCJdLmxlbmd0aCArIHRoaXMuc3RhY2tbXCJ5XCJdLmxlbmd0aCAhPT0gMFxyXG4gICAgKSB7XHJcbiAgICAgIFtjb29yZGluYXRlLCBpbmRleF0gPSB0aGlzLnNtYXJ0QXR0YWNrKFxyXG4gICAgICAgIHRoaXMuaXNQcmV2aW91c01vdmVIaXQsXHJcbiAgICAgICAgdGhpcy5wcmV2aW91c01vdmUsXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgICBpZiAoaW5kZXggPT09IC0xKSB7XHJcbiAgICAgIFtjb29yZGluYXRlLCBpbmRleF0gPSB0aGlzLmF0dGFja1JhbmRvbSgpO1xyXG4gICAgfVxyXG4gICAgdGhpcy5tb3Zlcy5zcGxpY2UoaW5kZXgsIDEpO1xyXG4gICAgdGhpcy5wcmV2aW91c01vdmUgPSBjb29yZGluYXRlO1xyXG4gICAgcmV0dXJuIGNvb3JkaW5hdGU7XHJcbiAgfSxcclxuICBzbWFydEF0dGFjayhoaXQsIHByZXZpb3VzTW92ZSkge1xyXG4gICAgLy8gVE9ETzogY3JlYXRlIHRoZSBzbWFydGVyIGNvbXB1dGVyXHJcbiAgICAvLyByZW1vdmUgc2hpcCBnYXBzIGZyb20gbW92ZXMsIHNvIGl0IHdpbGwgbmV2ZXIgaGl0IGl0XHJcbiAgICBpZiAodGhpcy5pc1ByZXZpb3VzU2hpcFN1bmspIHtcclxuICAgICAgdGhpcy5hdHRhY2tEaXJlY3Rpb24gPSBcInhcIjtcclxuICAgICAgdGhpcy5zdGFja1tcInhcIl0gPSBbXTtcclxuICAgICAgdGhpcy5zdGFja1tcInlcIl0gPSBbXTtcclxuICAgICAgcmV0dXJuIFt1bmRlZmluZWQsIC0xXTtcclxuICAgIH1cclxuICAgIGlmICghaGl0ICYmIHRoaXMuc3RhY2tbXCJ4XCJdLmxlbmd0aCA9PT0gMCkge1xyXG4gICAgICB0aGlzLmF0dGFja0RpcmVjdGlvbiA9IFwieVwiO1xyXG4gICAgfVxyXG4gICAgaWYgKCF0aGlzLnN0YWNrW1wieVwiXS5sZW5ndGggJiYgdGhpcy5hdHRhY2tEaXJlY3Rpb24gIT09IFwieVwiKSB7XHJcbiAgICAgIHRoaXMuZmlsbFN0YWNrUXVldWUoXCJ5XCIsIHByZXZpb3VzTW92ZSk7XHJcbiAgICB9XHJcbiAgICBpZiAoaGl0ID09PSB0cnVlKSB7XHJcbiAgICAgIHRoaXMuZmlsbFN0YWNrUXVldWUodGhpcy5hdHRhY2tEaXJlY3Rpb24sIHByZXZpb3VzTW92ZSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gdGhpcy5nZXRTbWFydE1vdmUodGhpcy5hdHRhY2tEaXJlY3Rpb24pO1xyXG4gIH0sXHJcbiAgZmlsbFN0YWNrUXVldWUoZGlyZWN0aW9uLCBwcmV2aW91c01vdmUpIHtcclxuICAgIGxldCBpID0gMDtcclxuICAgIGlmIChkaXJlY3Rpb24gPT09IFwieVwiKSB7XHJcbiAgICAgIGkgPSAxO1xyXG4gICAgfVxyXG4gICAgbGV0IG9uZSA9IFsuLi5wcmV2aW91c01vdmVdO1xyXG4gICAgb25lW2ldLS07XHJcbiAgICBpZiAodGhpcy5jaGVja0Nvb3JkaW5hdGUoLi4ub25lKSkge1xyXG4gICAgICB0aGlzLnN0YWNrW2RpcmVjdGlvbl0ucHVzaChvbmUpO1xyXG4gICAgfVxyXG4gICAgbGV0IHR3byA9IFsuLi5wcmV2aW91c01vdmVdO1xyXG4gICAgdHdvW2ldKys7XHJcbiAgICBpZiAodGhpcy5jaGVja0Nvb3JkaW5hdGUoLi4udHdvKSkge1xyXG4gICAgICB0aGlzLnN0YWNrW2RpcmVjdGlvbl0ucHVzaCh0d28pO1xyXG4gICAgfVxyXG4gIH0sXHJcbiAgZ2V0U21hcnRNb3ZlKGRpcmVjdGlvbikge1xyXG4gICAgbGV0IG5leHRNb3ZlID0gdGhpcy5zdGFja1tkaXJlY3Rpb25dLnBvcCgpO1xyXG4gICAgaWYgKG5leHRNb3ZlID09PSB1bmRlZmluZWQpIHtcclxuICAgICAgcmV0dXJuIFtuZXh0TW92ZSwgLTFdO1xyXG4gICAgfVxyXG4gICAgbGV0IGluZGV4ID0gdGhpcy5nZXRDb29yZGluYXRlSW5kZXgoLi4ubmV4dE1vdmUpO1xyXG4gICAgcmV0dXJuIFtuZXh0TW92ZSwgaW5kZXhdO1xyXG4gIH0sXHJcbiAgcmVtb3ZlTW92ZShtb3ZlKSB7XHJcbiAgICBsZXQgaW5kZXggPSB0aGlzLmdldENvb3JkaW5hdGVJbmRleCguLi5tb3ZlKTtcclxuICAgIHRoaXMubW92ZXMuc3BsaWNlKGluZGV4LCAxKTtcclxuICB9LFxyXG4gIGF0dGFja1JhbmRvbSgpIHtcclxuICAgIGNvbnN0IGluZGV4ID0gTWF0aC5mbG9vcihNYXRoLnJhbmRvbSgpICogKHRoaXMubW92ZXMubGVuZ3RoIC0gMSkpO1xyXG4gICAgY29uc3QgY29vcmRpbmF0ZSA9IHRoaXMubW92ZXNbaW5kZXhdO1xyXG4gICAgaWYgKCFjb29yZGluYXRlKSByZXR1cm4gXCJmaW5pc2hcIjtcclxuICAgIHJldHVybiBbY29vcmRpbmF0ZSwgaW5kZXhdO1xyXG4gIH0sXHJcbiAgY2hhbmdlUHJldmlvdXNNb3ZlU3RhdHVzKHN0YXR1cykge1xyXG4gICAgaWYgKHN0YXR1cyA9PT0gXCJtaXNzZWRcIikge1xyXG4gICAgICB0aGlzLmlzUHJldmlvdXNNb3ZlSGl0ID0gZmFsc2U7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuICAgIHRoaXMuaXNQcmV2aW91c01vdmVIaXQgPSB0cnVlO1xyXG4gIH0sXHJcbiAgZ2V0Q29vcmRpbmF0ZUluZGV4KHgsIHkpIHtcclxuICAgIGxldCBpbmRleCA9IC0xO1xyXG4gICAgdGhpcy5tb3Zlcy5tYXAoKG1vdmUsIGkpID0+IHtcclxuICAgICAgaWYgKG1vdmVbMF0gPT09IHggJiYgbW92ZVsxXSA9PT0geSkge1xyXG4gICAgICAgIGluZGV4ID0gaTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICByZXR1cm4gaW5kZXg7XHJcbiAgfSxcclxuICBjaGVja0Nvb3JkaW5hdGUoeCwgeSkge1xyXG4gICAgbGV0IHN0YXR1cyA9IGZhbHNlO1xyXG4gICAgdGhpcy5tb3Zlcy5tYXAoKG1vdmUpID0+IHtcclxuICAgICAgaWYgKG1vdmVbMF0gPT09IHggJiYgbW92ZVsxXSA9PT0geSkge1xyXG4gICAgICAgIHN0YXR1cyA9IHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHN0YXR1cztcclxuICB9LFxyXG5cclxuICBjaGFuZ2VQcmV2aW91c1NoaXBTdGF0dXMoc3RhdHVzKSB7XHJcbiAgICB0aGlzLmlzUHJldmlvdXNTaGlwU3VuayA9IHN0YXR1cztcclxuICB9LFxyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUNvbXB1dGVyKCkge1xyXG4gIGxldCBtb3ZlcyA9IGdldEFsbENvb3JkKCk7XHJcbiAgY29uc3Qgb2JqID0ge1xyXG4gICAgZ2V0IG1vdmVzKCkge1xyXG4gICAgICByZXR1cm4gbW92ZXM7XHJcbiAgICB9LFxyXG4gICAgaXNQcmV2aW91c01vdmVIaXQ6IG51bGwsXHJcbiAgICBwcmV2aW91c01vdmU6IG51bGwsXHJcbiAgICBzdGFjazogeyB4OiBbXSwgeTogW10gfSxcclxuICAgIGF0dGFja0RpcmVjdGlvbjogXCJ4XCIsXHJcbiAgICBpc1ByZXZpb3VzU2hpcFN1bms6IGZhbHNlLFxyXG4gICAgcmVzZXQoKSB7XHJcbiAgICAgIG1vdmVzID0gZ2V0QWxsQ29vcmQoKTtcclxuICAgIH0sXHJcbiAgfTtcclxuICBPYmplY3Quc2V0UHJvdG90eXBlT2Yob2JqLCBwcm90byk7XHJcbiAgcmV0dXJuIG9iajtcclxufVxyXG4iLCJpbXBvcnQgcmVuZGVyIGZyb20gXCIuLi9WaWV3L2RvbVwiO1xyXG5pbXBvcnQgdXBkYXRlRG9tIGZyb20gXCIuLi9WaWV3L3VwZGF0ZURvbVwiO1xyXG5pbXBvcnQgY3JlYXRlR2FtZWJvYXJkIGZyb20gXCIuLi9Nb2RlbC9nYW1lYm9hcmRcIjtcclxuaW1wb3J0IHsgY3JlYXRlQ29tcHV0ZXIgfSBmcm9tIFwiLi4vTW9kZWwvcGxheWVyXCI7XHJcbmltcG9ydCB7IGluaXRQbGFjZVNoaXAgfSBmcm9tIFwiLi4vTW9kZWwvc2hpcFwiO1xyXG5pbXBvcnQgeyBzdGFydERyYWcgfSBmcm9tIFwiLi9kcmFnRHJvcFwiO1xyXG5pbXBvcnQgeyByb3RhdGVTaGlwIH0gZnJvbSBcIi4vcm90YXRlU2hpcFwiO1xyXG4vLyBpbXBvcnQgc2VsZWN0IGZyb20gXCIuL0RPTS9zZWxlY3RvclwiO1xyXG4vLyBUT0RPOiBtYWtlIGNvbXB1dGVyIHNtYXJ0XHJcbmNvbnN0IHNsZWVwID0gKG1zKSA9PiBuZXcgUHJvbWlzZSgocikgPT4gc2V0VGltZW91dChyLCBtcykpO1xyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBnYW1lKCkge1xyXG4gIGxldCBwbGF5ZXJCb2FyZCA9IGNyZWF0ZUdhbWVib2FyZCgpO1xyXG4gIGxldCBjb21wdXRlckJvYXJkID0gY3JlYXRlR2FtZWJvYXJkKCk7XHJcbiAgbGV0IGNvbXB1dGVyID0gY3JlYXRlQ29tcHV0ZXIoKTtcclxuXHJcbiAgaW5pdFBsYWNlU2hpcChwbGF5ZXJCb2FyZCk7XHJcbiAgaW5pdFBsYWNlU2hpcChjb21wdXRlckJvYXJkKTtcclxuXHJcbiAgcmVuZGVyRG9tKHBsYXllckJvYXJkLCBjb21wdXRlckJvYXJkKTtcclxuXHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHJlc2V0R2FtZSk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHN0YXJ0R2FtZSk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIGRyYWdIYW5kbGVyLCB7IHBhc3NpdmU6IGZhbHNlIH0pO1xyXG4gIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCByb3RhdGVTaGlwSGFuZGxlcik7XHJcblxyXG4gIGZ1bmN0aW9uIHJvdGF0ZVNoaXBIYW5kbGVyKGUpIHtcclxuICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKCdbZGF0YS1zaGlwPVwidHJ1ZVwiXScpKSB7XHJcbiAgICAgIGxldCB4ID0gK2UudGFyZ2V0LmRhdGFzZXQueDtcclxuICAgICAgbGV0IHkgPSArZS50YXJnZXQuZGF0YXNldC55O1xyXG4gICAgICBpZiAocm90YXRlU2hpcCh4LCB5LCBwbGF5ZXJCb2FyZCkpIHtcclxuICAgICAgICByZW5kZXIuYm9hcmQocGxheWVyQm9hcmQsIFwicGxheWVyXCIsIHRydWUpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGRyYWdIYW5kbGVyKGUpIHtcclxuICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKCdbZGF0YS1zaGlwPVwidHJ1ZVwiXScpKSB7XHJcbiAgICAgIGUudGFyZ2V0LnJlbGVhc2VQb2ludGVyQ2FwdHVyZShlLnBvaW50ZXJJZCk7XHJcbiAgICAgIHN0YXJ0RHJhZyhlLCBwbGF5ZXJCb2FyZCwgcmVuZGVyLmJvYXJkKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHN0YXJ0R2FtZShlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQubWF0Y2hlcygnYnV0dG9uW2RhdGEtdHlwZT1cInN0YXJ0XCJdJykpIHtcclxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIGRyYWdIYW5kbGVyKTtcclxuICAgICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHJvdGF0ZVNoaXBIYW5kbGVyKTtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBsYXlSb3VuZEhhbmRsZXIpO1xyXG4gICAgICB1cGRhdGVEb20ucmVtb3ZlQ3Vyc29yRHJhZygpO1xyXG4gICAgICB1cGRhdGVEb20ucmVtb3ZlRGlzcGxheU5vbmUoKTtcclxuICAgICAgdXBkYXRlRG9tLm1lc3NhZ2VJbmZvKFwiWW91ciBUdXJuXCIpO1xyXG4gICAgICBlLnRhcmdldC5yZW1vdmUoKTtcclxuICAgICAgcmVuZGVyLmJ1dHRvbihcInJlc3RhcnRcIik7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBhc3luYyBmdW5jdGlvbiBwbGF5Um91bmRIYW5kbGVyKGUpIHtcclxuICAgIGlmIChlLnRhcmdldC5tYXRjaGVzKFwiZGl2W2RhdGEtYm9hcmQ9J2NvbXB1dGVyJ10gZGl2XCIpKSB7XHJcbiAgICAgIGxldCB4ID0gZS50YXJnZXQuZGF0YXNldC54O1xyXG4gICAgICBsZXQgeSA9IGUudGFyZ2V0LmRhdGFzZXQueTtcclxuICAgICAgYXdhaXQgcGxheVJvdW5kKHgsIHkpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgYXN5bmMgZnVuY3Rpb24gcGxheVJvdW5kKHgsIHkpIHtcclxuICAgIC8vIFRPRE86IGZpbmQgYSB3YXkgdG8gdGVsbCB0aGF0IGEgc2hpcCBoYXMgYmVlbiBzdW5rXHJcbiAgICAvLyBwbGF5ZXIgdHVyblxyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHBsYXlSb3VuZEhhbmRsZXIpO1xyXG4gICAgY29uc3QgcmVzdWx0ID0gY29tcHV0ZXJCb2FyZC5yZWNlaXZlQXR0YWNrKFt4LCB5XSk7XHJcbiAgICBpZiAoIXJlc3VsdCkgcmV0dXJuO1xyXG4gICAgdXBkYXRlRG9tLnRpbGUocmVzdWx0LCBcImNvbXB1dGVyXCIsIHgsIHkpO1xyXG4gICAgaWYgKGNvbXB1dGVyQm9hcmQudGhpc1NoaXBTdW5rKCkpIHtcclxuICAgICAgdXBkYXRlRG9tLm1lc3NhZ2VJbmZvKFwiRW5lbXkncyBzaGlwIGhhcyBiZWVuIHN1bmtcIik7XHJcbiAgICAgIGF3YWl0IHNsZWVwKDEyMDApO1xyXG4gICAgfVxyXG4gICAgdXBkYXRlRG9tLmxpc3RPZlNoaXBzKGNvbXB1dGVyQm9hcmQuc2hpcHMsIFwiY29tcHV0ZXJcIik7XHJcbiAgICBpZiAoY29tcHV0ZXJCb2FyZC5hcmVBbGxTdW5rKCkpIHtcclxuICAgICAgc3RvcEdhbWUoXCJQbGF5ZXJcIik7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICB1cGRhdGVEb20ubWVzc2FnZUluZm8oXCJDb21wdXRlciBUdXJuXCIpO1xyXG4gICAgdXBkYXRlRG9tLnRvZ2dsZURpbUJvYXJkKFwiY29tcHV0ZXJcIik7XHJcbiAgICBhd2FpdCBzbGVlcCgxMDAwKTtcclxuICAgIC8vIGNvbXB1dGVyIHR1cm5cclxuICAgIGNvbnN0IGNvb3JkID0gY29tcHV0ZXIuY2hvb3NlQ29vcmQoKTtcclxuICAgIGNvbnN0IGNvbXBSZXN1bHQgPSBwbGF5ZXJCb2FyZC5yZWNlaXZlQXR0YWNrKGNvb3JkKTtcclxuICAgIGNvbXB1dGVyLmNoYW5nZVByZXZpb3VzTW92ZVN0YXR1cyhjb21wUmVzdWx0KTtcclxuICAgIGNvbXB1dGVyLmNoYW5nZVByZXZpb3VzU2hpcFN0YXR1cyhmYWxzZSk7XHJcbiAgICB1cGRhdGVEb20udGlsZShjb21wUmVzdWx0LCBcInBsYXllclwiLCAuLi5jb29yZCk7XHJcbiAgICBpZiAocGxheWVyQm9hcmQudGhpc1NoaXBTdW5rKCkpIHtcclxuICAgICAgY29tcHV0ZXIuY2hhbmdlUHJldmlvdXNTaGlwU3RhdHVzKHRydWUpO1xyXG4gICAgICB1cGRhdGVEb20ubWVzc2FnZUluZm8oXCJZb3VyIHNoaXAgaGFzIGJlZW4gc3Vua1wiKTtcclxuICAgICAgYXdhaXQgc2xlZXAoMTIwMCk7XHJcbiAgICB9XHJcbiAgICB1cGRhdGVEb20ubGlzdE9mU2hpcHMocGxheWVyQm9hcmQuc2hpcHMsIFwicGxheWVyXCIpO1xyXG4gICAgaWYgKHBsYXllckJvYXJkLmFyZUFsbFN1bmsoKSkge1xyXG4gICAgICBzdG9wR2FtZShcIkNvbXB1dGVyXCIpO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgICB1cGRhdGVEb20ubWVzc2FnZUluZm8oXCJZb3VyIFR1cm5cIik7XHJcbiAgICB1cGRhdGVEb20udG9nZ2xlRGltQm9hcmQoXCJwbGF5ZXJcIik7XHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcGxheVJvdW5kSGFuZGxlcik7XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBzdG9wR2FtZSh1c2VyKSB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwiY2xpY2tcIiwgcGxheVJvdW5kSGFuZGxlcik7XHJcbiAgICB1cGRhdGVEb20ubWVzc2FnZUluZm8oYCR7dXNlcn0gV29uYCk7XHJcbiAgICByZW5kZXIuYm9hcmQoY29tcHV0ZXJCb2FyZCwgXCJjb21wdXRlclwiLCB0cnVlKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJlc2V0R2FtZShlKSB7XHJcbiAgICBpZiAoZS50YXJnZXQubWF0Y2hlcyhcImJ1dHRvbltkYXRhLXR5cGU9J3Jlc3RhcnQnXVwiKSkge1xyXG4gICAgICBwbGF5ZXJCb2FyZCA9IGNyZWF0ZUdhbWVib2FyZCgpO1xyXG4gICAgICBjb21wdXRlckJvYXJkID0gY3JlYXRlR2FtZWJvYXJkKCk7XHJcbiAgICAgIGNvbXB1dGVyID0gY3JlYXRlQ29tcHV0ZXIoKTtcclxuICAgICAgaW5pdFBsYWNlU2hpcChwbGF5ZXJCb2FyZCk7XHJcbiAgICAgIGluaXRQbGFjZVNoaXAoY29tcHV0ZXJCb2FyZCk7XHJcbiAgICAgIHJlbmRlckRvbShwbGF5ZXJCb2FyZCwgY29tcHV0ZXJCb2FyZCk7XHJcbiAgICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJjbGlja1wiLCBwbGF5Um91bmRIYW5kbGVyKTtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJkb3duXCIsIGRyYWdIYW5kbGVyKTtcclxuICAgICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcImNsaWNrXCIsIHJvdGF0ZVNoaXBIYW5kbGVyKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlbmRlckRvbShwbGF5ZXJCb2FyZCwgY29tcHV0ZXJCb2FyZCkge1xyXG4gIHJlbmRlci5odG1sKCk7XHJcbiAgcmVuZGVyLmJvYXJkKHBsYXllckJvYXJkLCBcInBsYXllclwiLCB0cnVlKTtcclxuICByZW5kZXIuYm9hcmQoY29tcHV0ZXJCb2FyZCwgXCJjb21wdXRlclwiLCBmYWxzZSk7XHJcbiAgcmVuZGVyLmxpc3RPZlNoaXBzKHBsYXllckJvYXJkLnNoaXBzLCBcInBsYXllclwiKTtcclxuICByZW5kZXIubGlzdE9mU2hpcHMoY29tcHV0ZXJCb2FyZC5zaGlwcywgXCJjb21wdXRlclwiKTtcclxufVxyXG4iLCJleHBvcnQgZnVuY3Rpb24gcm90YXRlU2hpcCh4LCB5LCBnYW1lYm9hcmQpIHtcclxuICBsZXQgc2hpcCA9IGdhbWVib2FyZC5ib2FyZFt4XVt5XTtcclxuICBsZXQgY29vcmQgPSBzaGlwLnBvc2l0aW9uLmhlYWQ7XHJcbiAgbGV0IG9yaWVudGF0aW9uID0gc2hpcC5vcmllbnRhdGlvbjtcclxuICBpZiAob3JpZW50YXRpb24gPT09IFwieFwiKSB7XHJcbiAgICBvcmllbnRhdGlvbiA9IFwieVwiO1xyXG4gIH0gZWxzZSB7XHJcbiAgICBvcmllbnRhdGlvbiA9IFwieFwiO1xyXG4gIH1cclxuICBsZXQgbGVuZ3RoID0gc2hpcC5sZW5ndGg7XHJcbiAgaWYgKGdhbWVib2FyZC5pc091dHNpZGUoLi4uY29vcmQsIGxlbmd0aCwgb3JpZW50YXRpb24pKSByZXR1cm4gZmFsc2U7XHJcblxyXG4gIGlmIChnYW1lYm9hcmQuaXNUaGVyZUFTaGlwKC4uLmNvb3JkLCBsZW5ndGgsIG9yaWVudGF0aW9uLCBzaGlwLm5hbWUpKVxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG5cclxuICBpZiAoZ2FtZWJvYXJkLmlzVG9vQ2xvc2VUb090aGVyU2hpcCguLi5jb29yZCwgbGVuZ3RoLCBvcmllbnRhdGlvbiwgc2hpcC5uYW1lKSlcclxuICAgIHJldHVybiBmYWxzZTtcclxuXHJcbiAgc2hpcC5vcmllbnRhdGlvbiA9IG9yaWVudGF0aW9uO1xyXG4gIGdhbWVib2FyZC5tb3ZlU2hpcChjb29yZCwgY29vcmQsIHNoaXApO1xyXG4gIHJldHVybiB0cnVlO1xyXG59XHJcbiIsImltcG9ydCBjc3MgZnJvbSBcIi4uL3N0eWxlLmNzc1wiO1xyXG5leHBvcnQgZnVuY3Rpb24gc3RhcnREcmFnKGUsIGdhbWVib2FyZCwgcmVuZGVyQm9hcmQpIHtcclxuICBsZXQgY3VycmVudEVsZW1lbnQgPSBlLnRhcmdldDtcclxuICBsZXQgaXNEcmFnZ2VkID0gZmFsc2U7XHJcbiAgbGV0IGRyb3BQb2ludDtcclxuICBmdW5jdGlvbiBkcmFnZ2luZyhlKSB7XHJcbiAgICBlLnByZXZlbnREZWZhdWx0KCk7XHJcbiAgICBpc0RyYWdnZWQgPSB0cnVlO1xyXG4gICAgYW5pbWF0ZURyYWcoZSwgY3VycmVudEVsZW1lbnQsIGdhbWVib2FyZCk7XHJcbiAgfVxyXG4gIGZ1bmN0aW9uIGVuZERyYWcoZSkge1xyXG4gICAgZG9jdW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJvdmVyXCIsIGRyYWdnaW5nKTtcclxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoXCJwb2ludGVyY2FuY2VsXCIsIGNhbmNlbCk7XHJcbiAgICBkcm9wUG9pbnQgPSBlLnRhcmdldDtcclxuICAgIGlmICghaXNEcmFnZ2VkKSByZXR1cm47XHJcbiAgICBpZiAoZHJvcFBvaW50LmRhdGFzZXQuZHJvcCkge1xyXG4gICAgICBkcm9wKGN1cnJlbnRFbGVtZW50LCBkcm9wUG9pbnQsIGdhbWVib2FyZCk7XHJcbiAgICAgIHJlbmRlckJvYXJkKGdhbWVib2FyZCwgXCJwbGF5ZXJcIiwgdHJ1ZSk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmdW5jdGlvbiBjYW5jZWwoKSB7XHJcbiAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKFwicG9pbnRlcm92ZXJcIiwgZHJhZ2dpbmcpO1xyXG4gIH1cclxuICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwicG9pbnRlcm92ZXJcIiwgZHJhZ2dpbmcsIHsgcGFzc2l2ZTogZmFsc2UgfSk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJ1cFwiLCBlbmREcmFnLCB7IG9uY2U6IHRydWUgfSk7XHJcbiAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihcInBvaW50ZXJjYW5jZWxcIiwgY2FuY2VsLCB7IG9uY2U6IHRydWUgfSk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGFuaW1hdGVEcmFnKGUsIGN1cnJlbnRFbGVtZW50LCBnYW1lYm9hcmQpIHtcclxuICBsZXQgW2N1cnJlbnRYLCBjdXJyZW50WV0gPSBbK2UudGFyZ2V0LmRhdGFzZXQueCwgK2UudGFyZ2V0LmRhdGFzZXQueV07XHJcbiAgbGV0IFtwcmV2aW91c1gsIHByZXZpb3VzWV0gPSBbXHJcbiAgICArZS5yZWxhdGVkVGFyZ2V0LmRhdGFzZXQueCxcclxuICAgICtlLnJlbGF0ZWRUYXJnZXQuZGF0YXNldC55LFxyXG4gIF07XHJcbiAgbGV0IHsgeCwgeSB9ID0gY3VycmVudEVsZW1lbnQuZGF0YXNldDtcclxuICBsZXQgc2hpcCA9IGdhbWVib2FyZC5ib2FyZFsreF1bK3ldO1xyXG4gIGxldCBsZW5ndGggPSBwYXJzZUludChzaGlwLmxlbmd0aCk7XHJcbiAgbGV0IG5hbWUgPSBzaGlwLm5hbWU7XHJcbiAgbGV0IG9yaWVudGF0aW9uID0gc2hpcC5vcmllbnRhdGlvbjtcclxuICAvLyBUT0RPOiByZWZhY3RvciB0aGlzIG1lc3NcclxuICBpZiAoIWlzTmFOKHByZXZpb3VzWCkpIHtcclxuICAgIGlmICghZ2FtZWJvYXJkLmlzT3V0c2lkZShwcmV2aW91c1gsIHByZXZpb3VzWSwgbGVuZ3RoLCBvcmllbnRhdGlvbikpIHtcclxuICAgICAgcmVzZXRUaWxlQ29sb3IocHJldmlvdXNYLCBwcmV2aW91c1ksIGxlbmd0aCwgb3JpZW50YXRpb24pO1xyXG4gICAgfVxyXG4gIH1cclxuICBpZiAoIWUudGFyZ2V0LmRhdGFzZXQuZHJvcCkgcmV0dXJuO1xyXG4gIC8vIFRPRE86IGNyZWF0ZSBjaGVja1dhdGVyKCkgZnVuY3Rpb25cclxuICBpZiAoZ2FtZWJvYXJkLmlzT3V0c2lkZShjdXJyZW50WCwgY3VycmVudFksIGxlbmd0aCwgb3JpZW50YXRpb24pKSByZXR1cm47XHJcbiAgaWYgKGdhbWVib2FyZC5pc1RoZXJlQVNoaXAoY3VycmVudFgsIGN1cnJlbnRZLCBsZW5ndGgsIG9yaWVudGF0aW9uLCBuYW1lKSlcclxuICAgIHJldHVybjtcclxuICBpZiAoXHJcbiAgICBnYW1lYm9hcmQuaXNUb29DbG9zZVRvT3RoZXJTaGlwKFxyXG4gICAgICBjdXJyZW50WCxcclxuICAgICAgY3VycmVudFksXHJcbiAgICAgIGxlbmd0aCxcclxuICAgICAgb3JpZW50YXRpb24sXHJcbiAgICAgIG5hbWUsXHJcbiAgICApXHJcbiAgKVxyXG4gICAgcmV0dXJuO1xyXG5cclxuICBjaGFuZ2VUaWxlQ29sb3IoY3VycmVudFgsIGN1cnJlbnRZLCBsZW5ndGgsIG9yaWVudGF0aW9uKTtcclxufVxyXG5cclxuZnVuY3Rpb24gY2hhbmdlVGlsZUNvbG9yKHgsIHksIGxlbmd0aCwgb3JpZW50YXRpb24pIHtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgc2hpcE5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgZGl2W2RhdGEtYm9hcmQ9XCJwbGF5ZXJcIl0gZGl2W2RhdGEteD1cIiR7eH1cIl1bZGF0YS15PVwiJHt5fVwiXWAsXHJcbiAgICApO1xyXG4gICAgc2hpcE5vZGUuY2xhc3NMaXN0LmFkZChgJHtjc3MuZHJhZ31gKTtcclxuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJ4XCIpIHtcclxuICAgICAgeCsrO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuICAgIHkrKztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIHJlc2V0VGlsZUNvbG9yKHgsIHksIGxlbmd0aCwgb3JpZW50YXRpb24pIHtcclxuICBmb3IgKGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrKSB7XHJcbiAgICBsZXQgc2hpcE5vZGUgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKFxyXG4gICAgICBgZGl2W2RhdGEtYm9hcmQ9XCJwbGF5ZXJcIl0gZGl2W2RhdGEteD1cIiR7eH1cIl1bZGF0YS15PVwiJHt5fVwiXWAsXHJcbiAgICApO1xyXG4gICAgc2hpcE5vZGUuY2xhc3NMaXN0LnJlbW92ZShgJHtjc3MuZHJhZ31gKTtcclxuICAgIGlmIChvcmllbnRhdGlvbiA9PT0gXCJ4XCIpIHtcclxuICAgICAgeCsrO1xyXG4gICAgICBjb250aW51ZTtcclxuICAgIH1cclxuICAgIHkrKztcclxuICB9XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGRyb3AoY3VycmVudEVsZW1lbnQsIGRyb3BQb2ludCwgZ2FtZWJvYXJkKSB7XHJcbiAgbGV0IHsgeCwgeSB9ID0gY3VycmVudEVsZW1lbnQuZGF0YXNldDtcclxuICBsZXQgW2EsIGJdID0gWytkcm9wUG9pbnQuZGF0YXNldC54LCArZHJvcFBvaW50LmRhdGFzZXQueV07XHJcbiAgbGV0IHNoaXAgPSBnYW1lYm9hcmQuYm9hcmRbeF1beV07XHJcbiAgaWYgKCFzaGlwKSB7XHJcbiAgICByZXR1cm47XHJcbiAgfVxyXG4gIGxldCBsZW5ndGggPSBwYXJzZUludChzaGlwLmxlbmd0aCk7XHJcbiAgbGV0IG9yaWVudGF0aW9uID0gc2hpcC5vcmllbnRhdGlvbjtcclxuICBsZXQgbmFtZSA9IHNoaXAubmFtZTtcclxuICBsZXQgZnJvbSA9IFtwYXJzZUludCh4KSwgcGFyc2VJbnQoeSldO1xyXG4gIGxldCB0byA9IFthLCBiXTtcclxuICAvLyBjaGVjayB0aGUgZHJvcFBvaW50IGNvb3JkaW5hdGVcclxuICBpZiAoZ2FtZWJvYXJkLmlzT3V0c2lkZShhLCBiLCBsZW5ndGgsIG9yaWVudGF0aW9uKSkgcmV0dXJuO1xyXG4gIGlmIChnYW1lYm9hcmQuaXNUaGVyZUFTaGlwKGEsIGIsIGxlbmd0aCwgb3JpZW50YXRpb24sIG5hbWUpKSByZXR1cm47XHJcbiAgaWYgKGdhbWVib2FyZC5pc1Rvb0Nsb3NlVG9PdGhlclNoaXAoYSwgYiwgbGVuZ3RoLCBvcmllbnRhdGlvbiwgbmFtZSkpIHJldHVybjtcclxuXHJcbiAgZ2FtZWJvYXJkLm1vdmVTaGlwKGZyb20sIHRvLCBzaGlwKTtcclxufVxyXG4iLCJpbXBvcnQgZ2FtZSBmcm9tIFwiLi9Db250cm9sbGVyL2dhbWVMb2dpY1wiO1xyXG5cclxuZ2FtZSgpO1xyXG4iXSwibmFtZXMiOlsiaHRtbCIsImRvY3VtZW50IiwicXVlcnlTZWxlY3RvciIsImlubmVySFRNTCIsImJpZ1RpdGxlIiwiY29udGFpbmVyIiwibWVzc2FnZUluZm8iLCJib2FyZHNDb250YWluZXIiLCJtYWluQm9hcmRXcmFwcGVyIiwibGlzdE9mU2hpcHNMZWZ0IiwiYm9hcmRXcmFwcGVyIiwiYm9hcmQiLCJib2FyZE5hbWUiLCJsaXN0T2ZTaGlwc1JpZ2h0IiwiYnV0dG9uQ29udGFpbmVyIiwiZ2FtZWJvYXJkIiwidXNlciIsInNob3dTaGlwIiwiZG9tYm9hcmQiLCJ5IiwieCIsInRpbGUiLCJjcmVhdGVFbGVtZW50Iiwic2V0QXR0cmlidXRlIiwib25kcmFnc3RhcnQiLCJjbGFzc0xpc3QiLCJhZGQiLCJzaGlwIiwiYWxsb3dEcmFnIiwibWlzcyIsImhpdCIsImFwcGVuZCIsImxpc3RPZlNoaXBzIiwic2hpcHMiLCJsaXN0IiwiaW5uZXJUZXh0IiwiZGl2U2hpcCIsIm5hbWUiLCJpIiwibGVuZ3RoIiwic21hbGxUaWxlIiwiYnV0dG9uIiwidHlwZSIsImJ0biIsInRvVXBwZXJDYXNlIiwiY29uY2F0Iiwic2xpY2UiLCJ1bmRpbUJvYXJkIiwicmVtb3ZlIiwiZGltIiwibWVzc2FnZSIsInJlc3VsdCIsImRpc2FibGVkIiwiaXNTdW5rIiwic2hpcFN1bmsiLCJyZW1vdmVDdXJzb3JEcmFnIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJyZW1vdmVEaXNwbGF5Tm9uZSIsIm5vbmUiLCJyZW1vdmVBdHRyaWJ1dGUiLCJpbmZvIiwidG9nZ2xlRGltQm9hcmQiLCJwcm90byIsInRoaXMiLCJoZWFsdGgiLCJzdW5rIiwiaG9sZFNoaXBQb3NpdGlvbiIsIm9yaWVudGF0aW9uIiwicG9zaXRpb24iLCJoZWFkIiwidGFpbCIsImluaXRQbGFjZVNoaXAiLCJnZXRTaGlwIiwiaW5kZXgiLCJnZXRTaGlwQ2xvc3VyZSIsIm1vdmVzIiwiZ2V0QWxsQ29vcmQiLCJjb29yZGluYXRlIiwib3JpZW50IiwidHJ5UGxhY2VTaGlwIiwicmVtb3ZlQ29vcmRpbmF0ZSIsIk1hdGgiLCJmbG9vciIsInJhbmRvbSIsInBpY2tDb29yZGluYXRlIiwic2hpcFBvc2l0aW9uIiwicGxhY2VTaGlwIiwib2JqIiwiT2JqZWN0IiwiY3JlYXRlIiwiY3JlYXRlU2hpcCIsImNvb3JkIiwiY29waWVkQ29vcmRpbmF0ZSIsInNwbGljZSIsImluZGV4T2YiLCJhcnIiLCJwdXNoIiwibHNDb29yZCIsImxpc3RDb29yZGluYXRlIiwiaXNPdXRzaWRlIiwiaXNUaGVyZUFTaGlwIiwiaXNUb29DbG9zZVRvT3RoZXJTaGlwIiwibW92ZVNoaXAiLCJmcm9tIiwidG8iLCJzaGlwT2JqZWN0IiwicmVtb3ZlU2hpcCIsIm5ld1Bvc2l0aW9uIiwibm9kZSIsImdyYXBoIiwiYSIsImIiLCJzcGxpdCIsInNoaXBOYW1lIiwidW5kZWZpbmVkIiwicmVjZWl2ZUF0dGFjayIsImF0dGFjayIsIm1pc3NlZEF0dGFjayIsImFyZUFsbFN1bmsiLCJudW1PZlN1bmtTaGlwIiwiY2hlY2tTaGlwIiwidGhpc1NoaXBTdW5rIiwicmVzZXQiLCJjcmVhdGVCb2FyZCIsImNyZWF0ZUdyYXBoIiwidmVydGV4IiwicmV0dXJuUG9zc2libGVNb3ZlcyIsImZpbHRlciIsIm4iLCJjb29yIiwiaiIsImNyZWF0ZUdhbWVib2FyZCIsImNob29zZUNvb3JkIiwiYXR0YWNrUmFuZG9tIiwiaXNQcmV2aW91c01vdmVIaXQiLCJzdGFjayIsInNtYXJ0QXR0YWNrIiwicHJldmlvdXNNb3ZlIiwiaXNQcmV2aW91c1NoaXBTdW5rIiwiYXR0YWNrRGlyZWN0aW9uIiwiZmlsbFN0YWNrUXVldWUiLCJnZXRTbWFydE1vdmUiLCJkaXJlY3Rpb24iLCJvbmUiLCJjaGVja0Nvb3JkaW5hdGUiLCJ0d28iLCJuZXh0TW92ZSIsInBvcCIsImdldENvb3JkaW5hdGVJbmRleCIsInJlbW92ZU1vdmUiLCJtb3ZlIiwiY2hhbmdlUHJldmlvdXNNb3ZlU3RhdHVzIiwic3RhdHVzIiwibWFwIiwiY2hhbmdlUHJldmlvdXNTaGlwU3RhdHVzIiwiY3JlYXRlQ29tcHV0ZXIiLCJzZXRQcm90b3R5cGVPZiIsInNsZWVwIiwibXMiLCJQcm9taXNlIiwiciIsInNldFRpbWVvdXQiLCJyZW5kZXJEb20iLCJwbGF5ZXJCb2FyZCIsImNvbXB1dGVyQm9hcmQiLCJjb21wdXRlciIsInJvdGF0ZVNoaXBIYW5kbGVyIiwiZSIsInRhcmdldCIsIm1hdGNoZXMiLCJyb3RhdGVTaGlwIiwiZGF0YXNldCIsImRyYWdIYW5kbGVyIiwicmVsZWFzZVBvaW50ZXJDYXB0dXJlIiwicG9pbnRlcklkIiwicmVuZGVyQm9hcmQiLCJkcm9wUG9pbnQiLCJjdXJyZW50RWxlbWVudCIsImlzRHJhZ2dlZCIsImRyYWdnaW5nIiwicHJldmVudERlZmF1bHQiLCJjdXJyZW50WCIsImN1cnJlbnRZIiwicHJldmlvdXNYIiwicHJldmlvdXNZIiwicmVsYXRlZFRhcmdldCIsInBhcnNlSW50IiwiaXNOYU4iLCJkcmFnIiwicmVzZXRUaWxlQ29sb3IiLCJkcm9wIiwiY2hhbmdlVGlsZUNvbG9yIiwiYW5pbWF0ZURyYWciLCJjYW5jZWwiLCJyZW1vdmVFdmVudExpc3RlbmVyIiwiYWRkRXZlbnRMaXN0ZW5lciIsInBhc3NpdmUiLCJvbmNlIiwic3RhcnREcmFnIiwiYXN5bmMiLCJwbGF5Um91bmRIYW5kbGVyIiwic3RvcEdhbWUiLCJjb21wUmVzdWx0IiwicGxheVJvdW5kIiwiZ2FtZSJdLCJzb3VyY2VSb290IjoiIn0=