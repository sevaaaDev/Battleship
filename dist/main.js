(()=>{"use strict";var t={668:(t,e,n)=>{n.d(e,{Z:()=>h});var r=n(537),o=n.n(r),i=n(645),a=n.n(i),s=n(667),c=n.n(s),l=new URL(n(218),n.b),d=new URL(n(201),n.b),u=a()(o()),A=c()(l),p=c()(d);u.push([t.id,`* {\n  padding: 0;\n  margin: 0;\n  box-sizing: border-box;\n}\n/* protest-guerrilla-regular - latin */\n@font-face {\n  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */\n  font-family: "Protest Guerrilla";\n  font-style: normal;\n  font-weight: 400;\n  src: url(${A}) format("woff2");\n}\n/* orbitron-regular - latin */\n@font-face {\n  font-display: swap;\n  font-family: "Orbitron";\n  font-style: normal;\n  font-weight: 500;\n  src: url(${p}) format("woff2");\n}\n\n/* TODO: change font family */\n.kxQvc8rJ79LoRKCb8nOw {\n  width: 90%;\n  margin-inline: auto;\n}\n\n.IHitRuohOL4qlMoFBkaz {\n  min-width: 300px;\n  width: 80vw;\n  max-width: 375px;\n  aspect-ratio: 1/1;\n  display: grid;\n  grid-template-columns: repeat(10, 1fr);\n  box-shadow: 0.3rem 0.3rem 0 black;\n}\n\n.IHitRuohOL4qlMoFBkaz[data-board="computer"] {\n  cursor: crosshair;\n}\n\n.IHitRuohOL4qlMoFBkaz div {\n  border: 1px solid black;\n}\n\n.xhijktdZIHkpEbIdnr7q {\n  background: black;\n  touch-action: none;\n}\n\n.unuiIUTqHLly_isWNV_e {\n  cursor: move;\n}\n\n.DGzypBuW903zUseFSAf4 {\n  opacity: 0.5;\n}\n.xl5X9JLCFwVNR_vLWgUa {\n  background-color: grey;\n}\n\n.sMVWb7CXKixybHKg2dRz {\n  background-color: red;\n  cursor: not-allowed;\n}\n\n.p9GjbDR6kAa4yEqEiKuh {\n  background-color: blue;\n  cursor: not-allowed;\n}\n\n.KiH48s1aEIEMYcvc1l7P {\n  font-family: "Protest Guerrilla";\n  font-size: 3.5rem;\n  text-align: center;\n  margin: 1rem;\n}\n\n.rpCX3Ix39WdIUuL2NEPg {\n  display: flex;\n  gap: 1rem;\n  font-family: "Orbitron";\n}\n\n.sHptOvwqD8gAFBGqgM4x {\n  text-align: center;\n  margin-top: 1rem;\n}\n\n.QjeE9ix9AFDgKci062o6 {\n  display: flex;\n  align-items: center;\n  justify-content: space-evenly;\n  flex-wrap: wrap-reverse;\n  gap: 2rem;\n}\n\n@media (max-width: 1050px) {\n  .Kryf4fNGscPaTcbPaBdQ {\n    display: none;\n  }\n}\n\n.wV9aQdKDwBBuyayZ0MQQ {\n  display: flex;\n  margin: 1rem 0;\n}\n.wV9aQdKDwBBuyayZ0MQQ button {\n  font-family: "Orbitron";\n  display: inline-block;\n  margin-inline: auto;\n}\n\nbutton {\n  padding: 0.5rem 1rem;\n  box-shadow: 0.3rem 0.3rem black;\n}\n\nbutton:active {\n  translate: 0.3rem 0.3rem;\n  box-shadow: 0 0;\n}\n\n.Kryf4fNGscPaTcbPaBdQ {\n  width: 62px;\n}\n.Wp4dmQx7zm2btPjILr1a,\n.tHT_FBdqArTSJigc6KXV {\n}\n\n.tHT_FBdqArTSJigc6KXV div {\n  justify-content: left;\n}\n.Kryf4fNGscPaTcbPaBdQ div {\n  display: flex;\n  flex-direction: row-reverse;\n  gap: 3px;\n  height: 10px;\n  margin-bottom: 3px;\n}\n\n.GFyG59Tn8_wedBl3tx8R .joDO4L7ynzzyiBfDO5bq {\n  background-color: red;\n}\n\n.joDO4L7ynzzyiBfDO5bq {\n  background-color: black;\n  width: 10px;\n}\n\n.HKzLKt73qZpk67_NMg3L {\n  font-family: Orbitron;\n  border: 2px solid black;\n  text-align: center;\n  padding: 1rem;\n  width: 90%;\n  margin: 2rem auto;\n  max-width: 1000px;\n}\n\n.HKzLKt73qZpk67_NMg3L p {\n  font-size: max(0.8rem, min(2vw, 1rem));\n}\n`,"",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,UAAU;EACV,SAAS;EACT,sBAAsB;AACxB;AACA,sCAAsC;AACtC;EACE,kBAAkB,EAAE,sGAAsG;EAC1H,gCAAgC;EAChC,kBAAkB;EAClB,gBAAgB;EAChB,4DAA4E;AAC9E;AACA,6BAA6B;AAC7B;EACE,kBAAkB;EAClB,uBAAuB;EACvB,kBAAkB;EAClB,gBAAgB;EAChB,4DAAgE;AAClE;;AAEA,6BAA6B;AAC7B;EACE,UAAU;EACV,mBAAmB;AACrB;;AAEA;EACE,gBAAgB;EAChB,WAAW;EACX,gBAAgB;EAChB,iBAAiB;EACjB,aAAa;EACb,sCAAsC;EACtC,iCAAiC;AACnC;;AAEA;EACE,iBAAiB;AACnB;;AAEA;EACE,uBAAuB;AACzB;;AAEA;EACE,iBAAiB;EACjB,kBAAkB;AACpB;;AAEA;EACE,YAAY;AACd;;AAEA;EACE,YAAY;AACd;AACA;EACE,sBAAsB;AACxB;;AAEA;EACE,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;EACE,sBAAsB;EACtB,mBAAmB;AACrB;;AAEA;EACE,gCAAgC;EAChC,iBAAiB;EACjB,kBAAkB;EAClB,YAAY;AACd;;AAEA;EACE,aAAa;EACb,SAAS;EACT,uBAAuB;AACzB;;AAEA;EACE,kBAAkB;EAClB,gBAAgB;AAClB;;AAEA;EACE,aAAa;EACb,mBAAmB;EACnB,6BAA6B;EAC7B,uBAAuB;EACvB,SAAS;AACX;;AAEA;EACE;IACE,aAAa;EACf;AACF;;AAEA;EACE,aAAa;EACb,cAAc;AAChB;AACA;EACE,uBAAuB;EACvB,qBAAqB;EACrB,mBAAmB;AACrB;;AAEA;EACE,oBAAoB;EACpB,+BAA+B;AACjC;;AAEA;EACE,wBAAwB;EACxB,eAAe;AACjB;;AAEA;EACE,WAAW;AACb;AACA;;AAGA;;AAEA;EACE,qBAAqB;AACvB;AACA;EACE,aAAa;EACb,2BAA2B;EAC3B,QAAQ;EACR,YAAY;EACZ,kBAAkB;AACpB;;AAEA;EACE,qBAAqB;AACvB;;AAEA;EACE,uBAAuB;EACvB,WAAW;AACb;;AAEA;EACE,qBAAqB;EACrB,uBAAuB;EACvB,kBAAkB;EAClB,aAAa;EACb,UAAU;EACV,iBAAiB;EACjB,iBAAiB;AACnB;;AAEA;EACE,sCAAsC;AACxC",sourcesContent:['* {\r\n  padding: 0;\r\n  margin: 0;\r\n  box-sizing: border-box;\r\n}\r\n/* protest-guerrilla-regular - latin */\r\n@font-face {\r\n  font-display: swap; /* Check https://developer.mozilla.org/en-US/docs/Web/CSS/@font-face/font-display for other options. */\r\n  font-family: "Protest Guerrilla";\r\n  font-style: normal;\r\n  font-weight: 400;\r\n  src: url("./fonts/protest-guerrilla-v2-latin-regular.woff2") format("woff2");\r\n}\r\n/* orbitron-regular - latin */\r\n@font-face {\r\n  font-display: swap;\r\n  font-family: "Orbitron";\r\n  font-style: normal;\r\n  font-weight: 500;\r\n  src: url("./fonts/orbitron-v31-latin-500.woff2") format("woff2");\r\n}\r\n\r\n/* TODO: change font family */\r\n.container {\r\n  width: 90%;\r\n  margin-inline: auto;\r\n}\r\n\r\n.board {\r\n  min-width: 300px;\r\n  width: 80vw;\r\n  max-width: 375px;\r\n  aspect-ratio: 1/1;\r\n  display: grid;\r\n  grid-template-columns: repeat(10, 1fr);\r\n  box-shadow: 0.3rem 0.3rem 0 black;\r\n}\r\n\r\n.board[data-board="computer"] {\r\n  cursor: crosshair;\r\n}\r\n\r\n.board div {\r\n  border: 1px solid black;\r\n}\r\n\r\n.ship {\r\n  background: black;\r\n  touch-action: none;\r\n}\r\n\r\n.allowDrag {\r\n  cursor: move;\r\n}\r\n\r\n.dim {\r\n  opacity: 0.5;\r\n}\r\n.drag {\r\n  background-color: grey;\r\n}\r\n\r\n.hit {\r\n  background-color: red;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.miss {\r\n  background-color: blue;\r\n  cursor: not-allowed;\r\n}\r\n\r\n.bigTitle {\r\n  font-family: "Protest Guerrilla";\r\n  font-size: 3.5rem;\r\n  text-align: center;\r\n  margin: 1rem;\r\n}\r\n\r\n.mainBoardWrapper {\r\n  display: flex;\r\n  gap: 1rem;\r\n  font-family: "Orbitron";\r\n}\r\n\r\n.boardName {\r\n  text-align: center;\r\n  margin-top: 1rem;\r\n}\r\n\r\n.boardsContainer {\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: space-evenly;\r\n  flex-wrap: wrap-reverse;\r\n  gap: 2rem;\r\n}\r\n\r\n@media (max-width: 1050px) {\r\n  .listOfShips {\r\n    display: none;\r\n  }\r\n}\r\n\r\n.buttonContainer {\r\n  display: flex;\r\n  margin: 1rem 0;\r\n}\r\n.buttonContainer button {\r\n  font-family: "Orbitron";\r\n  display: inline-block;\r\n  margin-inline: auto;\r\n}\r\n\r\nbutton {\r\n  padding: 0.5rem 1rem;\r\n  box-shadow: 0.3rem 0.3rem black;\r\n}\r\n\r\nbutton:active {\r\n  translate: 0.3rem 0.3rem;\r\n  box-shadow: 0 0;\r\n}\r\n\r\n.listOfShips {\r\n  width: 62px;\r\n}\r\n.listOfShipsLeft,\r\n.listOfShipsRight {\r\n  composes: listOfShips;\r\n}\r\n\r\n.listOfShipsRight div {\r\n  justify-content: left;\r\n}\r\n.listOfShips div {\r\n  display: flex;\r\n  flex-direction: row-reverse;\r\n  gap: 3px;\r\n  height: 10px;\r\n  margin-bottom: 3px;\r\n}\r\n\r\n.shipSunk .smallTile {\r\n  background-color: red;\r\n}\r\n\r\n.smallTile {\r\n  background-color: black;\r\n  width: 10px;\r\n}\r\n\r\n.messageInfo {\r\n  font-family: Orbitron;\r\n  border: 2px solid black;\r\n  text-align: center;\r\n  padding: 1rem;\r\n  width: 90%;\r\n  margin: 2rem auto;\r\n  max-width: 1000px;\r\n}\r\n\r\n.messageInfo p {\r\n  font-size: max(0.8rem, min(2vw, 1rem));\r\n}\r\n'],sourceRoot:""}]),u.locals={container:"kxQvc8rJ79LoRKCb8nOw",board:"IHitRuohOL4qlMoFBkaz",ship:"xhijktdZIHkpEbIdnr7q",allowDrag:"unuiIUTqHLly_isWNV_e",dim:"DGzypBuW903zUseFSAf4",drag:"xl5X9JLCFwVNR_vLWgUa",hit:"sMVWb7CXKixybHKg2dRz",miss:"p9GjbDR6kAa4yEqEiKuh",bigTitle:"KiH48s1aEIEMYcvc1l7P",mainBoardWrapper:"rpCX3Ix39WdIUuL2NEPg",boardName:"sHptOvwqD8gAFBGqgM4x",boardsContainer:"QjeE9ix9AFDgKci062o6",listOfShips:"Kryf4fNGscPaTcbPaBdQ",buttonContainer:"wV9aQdKDwBBuyayZ0MQQ",listOfShipsLeft:"Wp4dmQx7zm2btPjILr1a Kryf4fNGscPaTcbPaBdQ",listOfShipsRight:"tHT_FBdqArTSJigc6KXV Kryf4fNGscPaTcbPaBdQ",shipSunk:"GFyG59Tn8_wedBl3tx8R",smallTile:"joDO4L7ynzzyiBfDO5bq",messageInfo:"HKzLKt73qZpk67_NMg3L"};const h=u},645:t=>{t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n="",r=void 0!==e[5];return e[4]&&(n+="@supports (".concat(e[4],") {")),e[2]&&(n+="@media ".concat(e[2]," {")),r&&(n+="@layer".concat(e[5].length>0?" ".concat(e[5]):""," {")),n+=t(e),r&&(n+="}"),e[2]&&(n+="}"),e[4]&&(n+="}"),n})).join("")},e.i=function(t,n,r,o,i){"string"==typeof t&&(t=[[null,t,void 0]]);var a={};if(r)for(var s=0;s<this.length;s++){var c=this[s][0];null!=c&&(a[c]=!0)}for(var l=0;l<t.length;l++){var d=[].concat(t[l]);r&&a[d[0]]||(void 0!==i&&(void 0===d[5]||(d[1]="@layer".concat(d[5].length>0?" ".concat(d[5]):""," {").concat(d[1],"}")),d[5]=i),n&&(d[2]?(d[1]="@media ".concat(d[2]," {").concat(d[1],"}"),d[2]=n):d[2]=n),o&&(d[4]?(d[1]="@supports (".concat(d[4],") {").concat(d[1],"}"),d[4]=o):d[4]="".concat(o)),e.push(d))}},e}},667:t=>{t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},537:t=>{t.exports=function(t){var e=t[1],n=t[3];if(!n)return e;if("function"==typeof btoa){var r=btoa(unescape(encodeURIComponent(JSON.stringify(n)))),o="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(r),i="/*# ".concat(o," */");return[e].concat([i]).join("\n")}return[e].join("\n")}},379:t=>{var e=[];function n(t){for(var n=-1,r=0;r<e.length;r++)if(e[r].identifier===t){n=r;break}return n}function r(t,r){for(var i={},a=[],s=0;s<t.length;s++){var c=t[s],l=r.base?c[0]+r.base:c[0],d=i[l]||0,u="".concat(l," ").concat(d);i[l]=d+1;var A=n(u),p={css:c[1],media:c[2],sourceMap:c[3],supports:c[4],layer:c[5]};if(-1!==A)e[A].references++,e[A].updater(p);else{var h=o(p,r);r.byIndex=s,e.splice(s,0,{identifier:u,updater:h,references:1})}a.push(u)}return a}function o(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap&&e.supports===t.supports&&e.layer===t.layer)return;n.update(t=e)}else n.remove()}}t.exports=function(t,o){var i=r(t=t||[],o=o||{});return function(t){t=t||[];for(var a=0;a<i.length;a++){var s=n(i[a]);e[s].references--}for(var c=r(t,o),l=0;l<i.length;l++){var d=n(i[l]);0===e[d].references&&(e[d].updater(),e.splice(d,1))}i=c}}},569:t=>{var e={};t.exports=function(t,n){var r=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!r)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");r.appendChild(n)}},216:t=>{t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e,t.options),e}},565:(t,e,n)=>{t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},795:t=>{t.exports=function(t){if("undefined"==typeof document)return{update:function(){},remove:function(){}};var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var r="";n.supports&&(r+="@supports (".concat(n.supports,") {")),n.media&&(r+="@media ".concat(n.media," {"));var o=void 0!==n.layer;o&&(r+="@layer".concat(n.layer.length>0?" ".concat(n.layer):""," {")),r+=n.css,o&&(r+="}"),n.media&&(r+="}"),n.supports&&(r+="}");var i=n.sourceMap;i&&"undefined"!=typeof btoa&&(r+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(i))))," */")),e.styleTagTransform(r,t,e.options)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},589:t=>{t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},201:(t,e,n)=>{t.exports=n.p+"fc7860871a10a6aa610a.woff2"},218:(t,e,n)=>{t.exports=n.p+"11d206ae8acb498a4836.woff2"}},e={};function n(r){var o=e[r];if(void 0!==o)return o.exports;var i=e[r]={id:r,exports:{}};return t[r](i,i.exports,n),i.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var r in e)n.o(e,r)&&!n.o(t,r)&&Object.defineProperty(t,r,{enumerable:!0,get:e[r]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var r=e.getElementsByTagName("script");if(r.length)for(var o=r.length-1;o>-1&&!t;)t=r[o--].src}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,n.nc=void 0,(()=>{var t=n(379),e=n.n(t),r=n(795),o=n.n(r),i=n(569),a=n.n(i),s=n(565),c=n.n(s),l=n(216),d=n.n(l),u=n(589),A=n.n(u),p=n(668),h={};h.styleTagTransform=A(),h.setAttributes=c(),h.insert=a().bind(null,"head"),h.domAPI=o(),h.insertStyleElement=d(),e()(p.Z,h);const f=p.Z&&p.Z.locals?p.Z.locals:void 0;const m={html:function(){document.querySelector("body").innerHTML=`\n<header>\n  <h1 class='${f.bigTitle}'>Battleship</h1>\n</header>\n<main class='${f.container}'>\n  <section class='${f.messageInfo}'>\n    <p>Drag ship to move <br> Click ship to rotate</p>\n  </section>\n  <section class='${f.boardsContainer}'>\n    <section class='${f.mainBoardWrapper}' data-board='player'>\n        <div class='${f.listOfShipsLeft}' data-board='player' style='display:none'></div>\n      <section class='${f.boardWrapper}'>\n        <div class='${f.board}' data-board='player' ondragstart="() => false"></div>\n        <h3 class='${f.boardName}'>PLAYER</h3>\n      </section>\n    </section>\n    <section class='${f.mainBoardWrapper}' data-board='computer' style='display:none'>\n      <section class='${f.boardWrapper}'>\n        <div class='${f.board}' data-board='computer' ondragstart="() => false"></div>\n        <h3 class='${f.boardName}'>COMPUTER</h3>\n      </section>\n        <div class='${f.listOfShipsRight}' data-board='computer' style='display:none'></div>\n    </section>\n  </section>\n  <section class='${f.buttonContainer}'>\n    <button type='button'data-type='start'>Start</button>\n  </section>\n</main>\n`},board:function(t,e,n){let r=document.querySelector(`div[data-board="${e}"].${f.board}`);r.innerHTML="";for(let o=9;o>=0;o--)for(let i=0;i<10;i++){let a=document.createElement("div");a.setAttribute("data-x",i),a.setAttribute("data-y",o),a.ondragstart=()=>!1,"player"===e&&a.setAttribute("data-drop",!0),"object"==typeof t.board[i][o]&&(n&&a.classList.add(`${f.ship}`),"player"===e&&(a.classList.add(`${f.allowDrag}`),"player"===e&&a.setAttribute("data-ship",!0))),"missed"===t.board[i][o]&&a.classList.add(`${f.miss}`),"hit"===t.board[i][o]&&a.classList.add(`${f.hit}`),r.append(a)}},listOfShips:function(t,e){const n=document.querySelector(`div[data-board='${e}'].${f.listOfShips}`);n.innerText="";for(let e of t){const t=document.createElement("div");t.setAttribute("data-ship",e.name);for(let n=0;n<e.length;n++){const e=document.createElement("div");e.classList.add(`${f.smallTile}`),t.append(e)}n.append(t)}},button:function(t){const e=document.querySelector(`.${f.buttonContainer}`),n=document.createElement("button");n.setAttribute("type","button"),n.setAttribute("data-type",t),n.innerText=t[0].toUpperCase().concat(t.slice(1)),e.append(n)}};function g(t){t.classList.remove(`${f.dim}`)}function b(t){document.querySelector(`.${f.messageInfo} p`).innerText=t}const v={tile:function(t,e,n,r){"missed"!==t?"hit"!==t||function(t,e,n){let r=document.querySelector(`div[data-board='${t}'] div[data-x='${e}'][data-y='${n}']`);r.classList.remove(`${f.ship}`),r.classList.add(`${f.hit}`)}(e,n,r):function(t,e,n){let r=document.querySelector(`div[data-board='${t}'] div[data-x='${e}'][data-y='${n}']`);r.classList.remove(`${f.disabled}`),r.classList.add(`${f.miss}`)}(e,n,r)},listOfShips:function(t,e){for(let n of t){const t=document.querySelector(`div[data-board='${e}'] div[data-ship='${n.name}']`);n.isSunk()&&t.classList.add(`${f.shipSunk}`)}},removeCursorDrag:function(){document.querySelectorAll(`div[data-board='player'] div.${f.ship}`).forEach((t=>{t.classList.remove(`${f.allowDrag}`)}))},removeDisplayNone:function(){document.querySelectorAll("[style='display:none']").forEach((t=>{t.removeAttribute("style")}))},messageInfo:b,info:function(t){"missed"!==t?"hit"!==t||b("You fired a shot and its a hit"):b("You fired a shot and misses")},toggleDimBoard:function(t){document.querySelector(`section[data-board='${t}'].${f.mainBoardWrapper}`).classList.add(`${f.dim}`),g("player"!==t?document.querySelector(`section[data-board='player'].${f.mainBoardWrapper}`):document.querySelector(`section[data-board='computer'].${f.mainBoardWrapper}`))}},y={isSunk:function(){return!this.health&&(this.sunk=!0,!0)},hit:function(){this.health&&this.health--}};function C(t,e,n,r){const o={listCoordinate:[]};return o.head=[t,e],o.tail=[t+r-1,e],"y"===n&&(o.tail=[t,e+r-1]),o}function E(t){const e=function(){let t=0;return function(){let e=[{name:"Carrier",length:5},{name:"Battleship",length:4},{name:"Destroyer",length:3},{name:"Submarine",length:3},{name:"Patrol",length:2}];return t>e.length-1&&(t=0),e[t++]}}();let n=k();for(let r=0;r<5;r++){const r=e();let{coordinate:o,orient:i}=B(t,r,n,"x");x(n,r.length,o,i)}}function B(t,e,n,r){let[o,i]=function(t){return t[Math.floor(Math.random()*(t.length-1))]}(n,e.length),a=C(o,i,r,e.length),s=t.placeShip(function({length:t,name:e,orient:n,shipPosition:r}){const o=Object.create(y);return o.length=t,o.name=e,o.health=t,o.sunk=!1,o.orientation=n,o.position=r,o}({...e,shipPosition:a,orient:r}));return r="x"===r?"y":"x",s?{coordinate:[o,i],orient:r}:B(t,e,n,r)}function x(t,e,n,r){let o=n.slice();for(let n=0;n<e;n++)"x"===r?t.splice(t.indexOf([o[0]++,o[1]]),1):t.splice(t.indexOf([o[0],o[1]++]),1)}function k(){let t=[];for(let e=0;e<10;e++)for(let n=0;n<10;n++)t.push([e,n]);return t}const S={placeShip(t){let e=t.length,n=t.orientation,r=t.name,[o,i]=t.position.head,a=t.position.listCoordinate;if(!this.isOutside(o,i,e,n)&&!this.isThereAShip(o,i,e,n,r)&&!this.isTooCloseToOtherShip(o,i,e,n,r)){for(let r=0;r<e;r++)this.board[o][i]=t,a.push({x:o,y:i}),"x"!==n?i++:o++;return this.ships.push(t),!0}},moveShip(t,e,n){this.removeShip(...t);let r=C(...e,n.orientation,n.length);n.position=r,this.placeShip(n)},isTooCloseToOtherShip(t,e,n,r,o){for(let i=0;i<n;i++){for(let n of this.graph[`${t},${e}`]){let[t,e]=n.split(",");if("object"==typeof this.board[t][e]&&this.board[t][e].name!==o)return!0}"x"!==r?e++:t++}return!1},isThereAShip(t,e,n,r,o){for(let i=0;i<n;i++){if("object"==typeof this.board[t][e]&&this.board[t][e].name!==o)return!0;"x"!==r?e++:t++}return!1},removeShip(t,e){let n=this.board[t][e];for(let t of n.position.listCoordinate)this.board[t.x][t.y]=void 0;let r=this.ships.indexOf(n);this.ships.splice(r,1)},isOutside:(t,e,n,r)=>t<0||t>9||e<0||e>9||("x"===r?t+n-1>9:e+n-1>9),receiveAttack([t,e]){let n;return!this.isOutside(t,e)&&"hit"!==this.board[t][e]&&("object"==typeof this.board[t][e]&&(this.board[t][e].hit(),n="hit",this.attack.push({x:t,y:e}),this.board[t][e]="hit"),void 0===this.board[t][e]&&(n="missed",this.missedAttack.push({x:t,y:e}),this.board[t][e]="missed"),n)},areAllSunk(){let t=this.checkShip();return!(this.ships.length-t)},thisShipSunk(){let t=this.checkShip();return this.numOfSunkShip!==t&&(this.numOfSunkShip=t,!0)},checkShip(){let t=0;for(let e of this.ships)e.isSunk()&&t++;return t},reset(){this.missedAttack=[],this.attack=[],this.board=O(),this.ships=[],this.graph=w()}};function w(){let t={};for(let e=0;e<10;e++)for(let n=0;n<10;n++){let r=$(e,n);t[`${e},${n}`]=r}return t}function $(t,e){let n=[];return n.push(`${t+1},${e}`),n.push(`${t-1},${e}`),n.push(`${t},${e+1}`),n.push(`${t},${e-1}`),n.push(`${t+1},${e+1}`),n.push(`${t+1},${e-1}`),n.push(`${t-1},${e+1}`),n.push(`${t-1},${e-1}`),n.filter((t=>{let e=t.split(",");if(e[0]<10&&e[0]>-1&&e[1]<10&&e[1]>-1)return!0}))}function O(){let t=[];for(let e=0;e<10;e++){t.push([]);for(let n=0;n<10;n++)t[e].push(void 0)}return t}function L(){const t=Object.create(S);return t.missedAttack=[],t.attack=[],t.board=O(),t.ships=[],t.numOfSunkShip=0,t.graph=w(),t}let T={chooseCoord(){let[t,e]=this.attackRandom();return(this.isPreviousMoveHit||this.stack.x.length+this.stack.y.length!==0)&&([t,e]=this.smartAttack(this.isPreviousMoveHit,this.previousMove)),-1===e&&([t,e]=this.attackRandom()),this.moves.splice(e,1),this.previousMove=t,t},smartAttack(t,e){return this.isPreviousShipSunk?(this.attackDirection="x",this.stack.x=[],this.stack.y=[],[void 0,-1]):(t||0!==this.stack.x.length||(this.attackDirection="y"),this.stack.y.length||"y"===this.attackDirection||this.fillStackQueue("y",e),!0===t&&this.fillStackQueue(this.attackDirection,e),this.getSmartMove(this.attackDirection))},fillStackQueue(t,e){let n=0;"y"===t&&(n=1);let r=[...e];r[n]--,this.checkCoordinate(...r)&&this.stack[t].push(r);let o=[...e];o[n]++,this.checkCoordinate(...o)&&this.stack[t].push(o)},getSmartMove(t){let e=this.stack[t].pop();return void 0===e?[e,-1]:[e,this.getCoordinateIndex(...e)]},removeMove(t){let e=this.getCoordinateIndex(...t);this.moves.splice(e,1)},attackRandom(){const t=Math.floor(Math.random()*(this.moves.length-1)),e=this.moves[t];return e?[e,t]:"finish"},changePreviousMoveStatus(t){this.isPreviousMoveHit="missed"!==t},getCoordinateIndex(t,e){let n=-1;return this.moves.map(((r,o)=>{r[0]===t&&r[1]===e&&(n=o)})),n},checkCoordinate(t,e){let n=!1;return this.moves.map((r=>{r[0]===t&&r[1]===e&&(n=!0)})),n},changePreviousShipStatus(t){this.isPreviousShipSunk=t}};function q(){let t=k();const e={get moves(){return t},isPreviousMoveHit:null,previousMove:null,stack:{x:[],y:[]},attackDirection:"x",isPreviousShipSunk:!1,reset(){t=k()}};return Object.setPrototypeOf(e,T),e}const P=t=>new Promise((e=>setTimeout(e,t)));function I(t,e){m.html(),m.board(t,"player",!0),m.board(e,"computer",!1),m.listOfShips(t.ships,"player"),m.listOfShips(e.ships,"computer")}!function(){let t=L(),e=L(),n=q();function r(e){e.target.matches('[data-ship="true"]')&&function(t,e,n){let r=n.board[t][e],o=r.position.head,i=r.orientation;i="x"===i?"y":"x";let a=r.length;return!(n.isOutside(...o,a,i)||n.isThereAShip(...o,a,i,r.name)||n.isTooCloseToOtherShip(...o,a,i,r.name)||(r.orientation=i,n.moveShip(o,o,r),0))}(+e.target.dataset.x,+e.target.dataset.y,t)&&m.board(t,"player",!0)}function o(e){e.target.matches('[data-ship="true"]')&&(e.target.releasePointerCapture(e.pointerId),function(t,e,n){let r,o=t.target,i=!1;function a(t){t.preventDefault(),i=!0,function(t,e,n){let[r,o]=[+t.target.dataset.x,+t.target.dataset.y],[i,a]=[+t.relatedTarget.dataset.x,+t.relatedTarget.dataset.y],{x:s,y:c}=e.dataset,l=n.board[+s][+c],d=parseInt(l.length),u=l.name,A=l.orientation;isNaN(i)||n.isOutside(i,a,d,A)||function(t,e,n,r){for(let o=0;o<n;o++)document.querySelector(`div[data-board="player"] div[data-x="${t}"][data-y="${e}"]`).classList.remove(`${f.drag}`),"x"!==r?e++:t++}(i,a,d,A),t.target.dataset.drop&&(n.isOutside(r,o,d,A)||n.isThereAShip(r,o,d,A,u)||n.isTooCloseToOtherShip(r,o,d,A,u)||function(t,e,n,r){for(let o=0;o<n;o++)document.querySelector(`div[data-board="player"] div[data-x="${t}"][data-y="${e}"]`).classList.add(`${f.drag}`),"x"!==r?e++:t++}(r,o,d,A))}(t,o,e)}function s(){document.removeEventListener("pointerover",a)}document.addEventListener("pointerover",a,{passive:!1}),document.addEventListener("pointerup",(function(t){document.removeEventListener("pointerover",a),document.removeEventListener("pointercancel",s),r=t.target,i&&r.dataset.drop&&(function(t,e,n){let{x:r,y:o}=t.dataset,[i,a]=[+e.dataset.x,+e.dataset.y],s=n.board[r][o];if(!s)return;let c=parseInt(s.length),l=s.orientation,d=s.name,u=[parseInt(r),parseInt(o)],A=[i,a];n.isOutside(i,a,c,l)||n.isThereAShip(i,a,c,l,d)||n.isTooCloseToOtherShip(i,a,c,l,d)||n.moveShip(u,A,s)}(o,r,e),n(e,"player",!0))}),{once:!0}),document.addEventListener("pointercancel",s,{once:!0})}(e,t,m.board))}async function i(r){if(r.target.matches("div[data-board='computer'] div")){let o=r.target.dataset.x,s=r.target.dataset.y;await async function(r,o){document.removeEventListener("click",i);const s=e.receiveAttack([r,o]);if(!s)return;if(v.tile(s,"computer",r,o),e.thisShipSunk()&&(v.messageInfo("Enemy's ship has been sunk"),await P(1200)),v.listOfShips(e.ships,"computer"),e.areAllSunk())return void a("Player");v.messageInfo("Computer Turn"),v.toggleDimBoard("computer"),await P(1e3);const c=n.chooseCoord(),l=t.receiveAttack(c);n.changePreviousMoveStatus(l),n.changePreviousShipStatus(!1),v.tile(l,"player",...c),t.thisShipSunk()&&(n.changePreviousShipStatus(!0),v.messageInfo("Your ship has been sunk"),await P(1200)),v.listOfShips(t.ships,"player"),t.areAllSunk()?a("Computer"):(v.messageInfo("Your Turn"),v.toggleDimBoard("player"),document.addEventListener("click",i))}(o,s)}}function a(t){document.removeEventListener("click",i),v.messageInfo(`${t} Won`),m.board(e,"computer",!0)}E(t),E(e),I(t,e),document.addEventListener("click",(function(a){a.target.matches("button[data-type='restart']")&&(t=L(),e=L(),n=q(),E(t),E(e),I(t,e),document.removeEventListener("click",i),document.addEventListener("pointerdown",o),document.addEventListener("click",r))})),document.addEventListener("click",(function(t){t.target.matches('button[data-type="start"]')&&(document.removeEventListener("pointerdown",o),document.removeEventListener("click",r),document.addEventListener("click",i),v.removeCursorDrag(),v.removeDisplayNone(),v.messageInfo("Your Turn"),t.target.remove(),m.button("restart"))})),document.addEventListener("pointerdown",o,{passive:!1}),document.addEventListener("click",r)}()})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,